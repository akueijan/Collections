"use strict";var canvasWidth,canvasHeight,index_view=new Vue({el:"#app",data:{},methods:{},mounted:function(){}});canvasWidth=1024<window.innerWidth?800:window.innerWidth,canvasHeight=window.innerHeight;var app=new PIXI.Application({width:canvasWidth,height:canvasHeight,backgroundColor:1087931});function init(){var i=new PIXI.Texture.fromImage("../images/images.jpg"),n=new PIXI.Sprite(i);app.stage.addChild(n);var t=n.width/n.height;n.height=window.innerHeight,n.width=window.innerHeight*t,n.interactive=!0,n.buttonMode=!0,n.on("mousedown",onDragStart).on("touchstart",onDragStart).on("mouseup",onDragEnd).on("mouseupoutside",onDragEnd).on("touchend",onDragEnd).on("touchendoutside",onDragEnd).on("mousemove",onDragMove).on("touchmove",onDragMove),n.position.x=0,n.position.y=0;new PIXI.Container;var e=PIXI.Sprite.fromImage("http://pixijs.io/examples/required/assets/basics/bunny.png");e.anchor.set(.5),e.scale.set(4),e.position.x=.1*n.width,e.position.y=.1*n.height,e.interactive=!0,e.buttonMode=!0,e.on("pointerdown",function(){console.log("123")}),n.addChild(e)}function onDragStart(i){this.dragging||(this.data=i.data,this.dragging=!0,this.dragPoint=i.data.getLocalPosition(this.parent),this.dragPoint.x-=this.x,this.dragPoint.y-=this.y)}function onDragEnd(){this.alpha=1,this.dragging=!1,this.data=null}function onDragMove(){if(this.dragging){var i=this.data.getLocalPosition(this.parent);this.x=i.x-this.dragPoint.x,this.x<-450&&(this.x=-450),0<this.x&&(this.x=0)}}app.width=screen.width,app.height=screen.height,$(".index").append(app.view),window.onresize=function(i){var n=window.innerWidth,t=window.innerHeight;app.renderer.resize(n,t),app.stage.x=.5*app.renderer.width,app.stage.y=.5*app.renderer.height},PIXI.loader.add("../images/images.jpg").load(init);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
