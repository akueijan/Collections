"use strict";var index_view=new Vue({el:"#app",data:{faceData:{}},methods:{checkUpimg:function(){var i=document.querySelector("input"),s=document.querySelector(".preview");i.addEventListener("change",function(){for(;s.firstChild;)s.removeChild(s.firstChild);var e=i.files;if(0===e.length){var t=document.createElement("p");t.textContent="No files currently selected for upload",s.appendChild(t)}else{var n=document.createElement("ol");s.appendChild(n);for(var a=0;a<e.length;a++){var r=document.createElement("li"),t=document.createElement("p");if(l(e[a])){t.textContent="File name "+e[a].name+", file size "+y(e[a].size)+".";var o=document.createElement("img");o.setAttribute("id","blah"),o.src=window.URL.createObjectURL(e[a]),r.appendChild(o),r.appendChild(t)}else t.textContent="File name "+e[a].name+": Not a valid file type. Update your selection.",r.appendChild(t);n.appendChild(r)}}}),i.style.opacity=0;var n=["image/jpeg","image/pjpeg","image/png"];function l(e){for(var t=0;t<n.length;t++)if(e.type===n[t])return!0;return!1}function y(e){return e<1024?e+"bytes":1024<e&&e<1048576?(e/1024).toFixed(1)+"KB":1048576<e?(e/1048576).toFixed(1)+"MB":void 0}},readURL:function(e){if(e.files&&e.files[0]){var t=new FileReader;t.onload=function(e){$("#blah").attr("src",e.target.result)},t.readAsDataURL(e.files[0])}},processImage:function(){var t=this;$.ajax({url:"https://eastasia.api.cognitive.microsoft.com/face/v1.0/detect?"+$.param({returnFaceId:"true",returnFaceLandmarks:"true",returnFaceAttributes:"age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise"}),beforeSend:function(e){e.setRequestHeader("Content-Type","application/json"),e.setRequestHeader("Ocp-Apim-Subscription-Key","a33915a3b926473da34474fdca48f3eb")},type:"POST",data:'{"url": "http://data.whicdn.com/images/159997508/large.jpg"}'}).done(function(e){console.log(e),t.faceData=e,$("#responseTextArea").val(JSON.stringify(e,null,2))}).fail(function(e,t,n){var a=""===n?"Error. ":n+" ("+e.status+"): ";a+=""===e.responseText?"":jQuery.parseJSON(e.responseText).message?jQuery.parseJSON(e.responseText).message:jQuery.parseJSON(e.responseText).error.message,alert(a)})},dataURItoBlob:function(e){var t;t=0<=e.split(",")[0].indexOf("base64")?atob(e.split(",")[1]):unescape(e.split(",")[1]);for(var n=e.split(",")[0].split(":")[1].split(";")[0],a=new Uint8Array(t.length),r=0;r<t.length;r++)a[r]=t.charCodeAt(r);return new Blob([a],{type:n})},loadcanvas:function(){var s=document.getElementById("loadcanvas"),l=s.getContext("2d"),y=new Image;y.src="http://data.whicdn.com/images/159997508/large.jpg",y.onload=function(){var e=s.width,t=s.height,n=e,a=t,r=s.width/2-n/2,o=s.height/2-a/2,i={x:e/2,y:t/2};l.save(),l.translate(i.x,i.y),l.translate(-i.x,-i.y),l.drawImage(y,0,0,e,t,r,o,n,a)},this.cutImg(can,faceRectangle.x,faceRectangle.y)},drawline:function(){var e=this,t=document.getElementById("loadcanvas");if(t.getContext){var n=t.getContext("2d");n.strokeStyle="#ffffff",n.lineWidth=2;var a=e.faceData[0].faceLandmarks;n.beginPath(),n.lineCap="round",n.lineJoin="round",n.save();var r=[{x:a.eyebrowLeftOuter.x,y:a.eyebrowLeftOuter.y},{x:a.eyebrowLeftInner.x,y:a.eyebrowLeftInner.y}];e.lineAni(r);var o=[{x:a.eyebrowRightOuter.x,y:a.eyebrowRightOuter.y},{x:a.eyebrowRightInner.x,y:a.eyebrowRightInner.y}];e.lineAni(o);var i=[{x:a.eyeLeftTop.x,y:a.eyeLeftTop.y},{x:a.eyeLeftOuter.x,y:a.eyeLeftOuter.y},{x:a.eyeLeftBottom.x,y:a.eyeLeftBottom.y},{x:a.eyeLeftInner.x,y:a.eyeLeftInner.y},{x:a.eyeLeftTop.x,y:a.eyeLeftTop.y}];e.lineAni(i);var s=[{x:a.eyeRightTop.x,y:a.eyeRightTop.y},{x:a.eyeRightOuter.x,y:a.eyeRightOuter.y},{x:a.eyeRightBottom.x,y:a.eyeRightBottom.y},{x:a.eyeRightInner.x,y:a.eyeRightInner.y},{x:a.eyeRightTop.x,y:a.eyeRightTop.y}];e.lineAni(s);var l=[{x:a.noseRootLeft.x,y:a.noseRootLeft.y},{x:a.noseLeftAlarTop.x,y:a.noseLeftAlarTop.y},{x:a.noseLeftAlarOutTip.x,y:a.noseLeftAlarOutTip.y},{x:a.noseTip.x,y:a.noseTip.y},{x:a.noseRightAlarOutTip.x,y:a.noseRightAlarOutTip.y},{x:a.noseRightAlarTop.x,y:a.noseRightAlarTop.y},{x:a.noseRootRight.x,y:a.noseRootRight.y}];e.lineAni(l),window.requestAnimationFrame(e.drawline)}},drawRowline:function(e,t,n,a,r){var o=0,i=0,s=document.getElementById("loadcanvas").getContext("2d");var l=setInterval(function(){o<=r&&(o+=r/10,i+=.1,s.moveTo(e,t),s.lineTo(e+(n-e)*i,t+(a-t)*i),s.stroke())},100);setTimeout(function(){clearInterval(l)},2e3)},lineAni:function(t){var n=document.getElementById("loadcanvas").getContext("2d");n.lineCap="round";var a=1,r=[];t.forEach(function(e){r.push(e)}),n.lineWidth=1;t=function(e){for(var t=[],n=1;n<e.length;n++)for(var a=e[n-1],r=e[n],o=r.x-a.x,i=r.y-a.y,s=0;s<100;s++){var l=a.x+o*s/100,y=a.y+i*s/100;t.push({x:l,y:y})}return t}(r);!function e(){a<t.length-1&&requestAnimationFrame(e);n.beginPath();n.moveTo(t[a-1].x,t[a-1].y);n.lineTo(t[a].x,t[a].y);n.stroke();a+=5}()},cutImg:function(e,t,n){var a=canvas.getContext("2d").getImageData(t.x,t.y,n.x,n.y),r=document.createElement("canvas");return r.width=n.x-t.x,r.height=n.y-t.y,r.getContext("2d").putImageData(a,0,0),r}},mounted:function(){this.checkUpimg()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
