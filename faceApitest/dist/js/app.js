"use strict";var production="false"===$("#appjs").data("mode"),friendo_url=$("#appjs").data("site"),device=deviceCheck();Vue.config.devtools=!production,Vue.config.debug=!production,Vue.config.silent=!production;var md=new MobileDetect(window.navigator.userAgent),tag=document.createElement("script");function findGetParameter(e){var t=null,n=[];return location.search.substr(1).split("&").forEach(function(o){(n=o.split("="))[0]===e&&(t=decodeURIComponent(n[1]))}),t}function checkCookie(e){var t=null,n=[];return document.cookie.split(";").forEach(function(o){" "==o.charAt(0)&&(o=o.substring(1)),(n=o.split("="))[0]===e&&(t=n[1])}),t}function deviceCheck(){var o={},e=new MobileDetect(window.navigator.userAgent);return e.match(/android/i)?(o.os="android",o.version=e.version("android")):e.match(/(iphone|ipad|ipod);?/i)?(o.os="ios",o.version=e.version("iOS")):(o.os="pc",o.version=e.version("Chrome")),o}$(function(){console.log("v1.0"),console.log(device),$(".nav").menu()}),Vue.mixin({data:function(){return{status:"",start_date:"2100/08/09 12:09:10",error_msg:"",mode:production?"Started":"Testing",loading:!1,popuptop:"",navHeight:"",rewardShake:!0,lineHref:""}},computed:{openCome:function(){return!("Testing"==this.mode||start_date<=0)}},watch:{error_msg:function(o){$("body").toggleClass("_freeze")}},methods:{gaEvant:function(o){dataLayer.push({event:o}),console.log("ga:",o)},server_busy:function(){var o=this;o.error_msg="系統忙碌中，請稍後在試!",o.loading=!1,o.error_cou=6},setCookie:function(o,e,t){var n=new Date;n.setTime(n.getTime()+1e3*t);var r="expires="+n.toUTCString();document.cookie=o+"="+e+";"+r+";"},logger:function(o,e,t){if(production){_LTracker.push({level:["ERROR","DEBUG","WARNING","INFO","ALL"][o],content:JSON.stringify(e),path:window.location.href,tag:t||null,device:device,timestamp:Date.now()})}},errorDone:function(){this.error_msg=""},checkOnline:function(){navigator.onLine||alert("Internet 連線已斷開，請確認您的網路狀態。")},state_check:function(){var t=this;return $.ajax({method:"GET",url:friendo_url+"GetProjectInfo",success:function(o){var e=o.Data;t.start_date=e.StartDateTime,t.mode=e.Status}})},scrollTo:function(o){var e=this;e.room=null,e.allPopupClose(),$("html,body").animate({scrollTop:$(o).offset().top-e.navHeight},500)},popupOpen:function(){var o=this;o.popuptop&&0!==o.popuptop||(o.popuptop=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop)),$("body").addClass("_freeze")},popupClose:function(){$("body").removeClass("_freeze"),$("html, body").scrollTop(this.popuptop),this.popuptop=0},afterEnter:function(){this.popupOpen()},getToken:function(){return $.ajax({url:friendo_url+"api/auth/login?projectId=61",headers:{webtoken:"2YRiIGevkjZZ-S22iwwuSoajRcnZUSeEJ+dwslTtM+s="},method:"GET",dataType:"json"})}},components:{comingsoon:comingsoon},mounted:function(){var o=$(".window-top").height();this.navHeight=o-30,$("body").css("margin-top",this.navHeight),$(".nav-lock").click(function(){$("body").removeClass("_freeze")}),alert("a")}}),Vue.component("comingsoon",{template:"#comingsoon",props:["StartDate","mode"],data:function(){return{comingsoon:!1,date:{total:0,days:0,hours:0,minutes:0,seconds:0}}},mounted:function(){var i=function o(e,t){return(e=""+e).length>=t?e:o("0"+e,t)},a=this,s=setInterval(function(){var o=Date.parse(new Date(a.StartDate))-Date.parse(new Date),e=Math.floor(o/1e3%60),t=Math.floor(o/1e3/60%60),n=Math.floor(o/36e5%24),r=Math.floor(o/864e5);a.date={total:o,days:i(r,2),hours:i(n,2),minutes:i(t,2),seconds:i(e,2)},a.date.total<=0||"Testing"==a.mode?(clearInterval(s),a.comingsoon=!1):a.comingsoon=!0},1e3)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
