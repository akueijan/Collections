"use strict";var production="false"===$("#appjs").data("mode"),friendo_url=$("#appjs").data("site"),device=deviceCheck();Vue.config.devtools=!production,Vue.config.debug=!production,Vue.config.silent=!production;var md=new MobileDetect(window.navigator.userAgent),tag=document.createElement("script");function findGetParameter(o){var t=null,n=[];return location.search.substr(1).split("&").forEach(function(e){(n=e.split("="))[0]===o&&(t=decodeURIComponent(n[1]))}),t}function checkCookie(o){var t=null,n=[];return document.cookie.split(";").forEach(function(e){" "==e.charAt(0)&&(e=e.substring(1)),(n=e.split("="))[0]===o&&(t=n[1])}),t}function deviceCheck(){var e={},o=new MobileDetect(window.navigator.userAgent);return o.match(/android/i)?(e.os="android",e.version=o.version("android")):o.match(/(iphone|ipad|ipod);?/i)?(e.os="ios",e.version=o.version("iOS")):(e.os="pc",e.version=o.version("Chrome")),e}$(function(){console.log("v1.0"),console.log(device),$(".nav").menu()}),Vue.mixin({data:function(){return{status:"",start_date:"2100/08/09 12:09:10",error_msg:"",mode:production?"Started":"Testing",loading:!1,navHeight:""}},computed:{openCome:function(){return!("Testing"==this.mode||start_date<=0)}},watch:{error_msg:function(e){$("body").toggleClass("_freeze")}},methods:{gaEvant:function(e){dataLayer.push({event:e}),console.log("ga:",e)},server_busy:function(){var e=this;e.error_msg="系統忙碌中，請稍後在試!",e.loading=!1,e.error_cou=6},setCookie:function(e,o,t){var n=new Date;n.setTime(n.getTime()+1e3*t);var i="expires="+n.toUTCString();document.cookie=e+"="+o+";"+i+";"},logger:function(e,o,t){if(production){_LTracker.push({level:["ERROR","DEBUG","WARNING","INFO","ALL"][e],content:JSON.stringify(o),path:window.location.href,tag:t||null,device:device,timestamp:Date.now()})}},errorDone:function(){this.error_msg=""},checkOnline:function(){navigator.onLine||alert("Internet 連線已斷開，請確認您的網路狀態。")},state_check:function(){var t=this;return $.ajax({method:"GET",url:"".concat(friendo_url,"GetProjectInfo"),success:function(e){var o=e.Data;t.start_date=o.StartDateTime,t.mode=o.Status}})},scrollTo:function(e){$("html,body").animate({scrollTop:$(e).offset().top-this.navHeight},500)},getToken:function(){return $.ajax({url:"".concat(friendo_url,"api/auth/login?projectId=61"),headers:{webtoken:"2YRiIGevkjZZ-S22iwwuSoajRcnZUSeEJ+dwslTtM+s="},method:"GET",dataType:"json"})},getIe:function(){var o,e;function t(e){return 0<=o.indexOf(e)}"ie"==(o=window.navigator.userAgent,e="ActiveXObject"in window,t("MSIE")||e?"ie":t("Firefox")&&!e?"Firefox":t("Chrome")&&!e?"Chrome":t("Opera")&&!e?"Opera":t("Safari")&&!e?"Safari":void 0)&&(this.ie11=!0)}},components:{comingsoon:comingsoon},mounted:function(){}}),Vue.component("comingsoon",{template:"#comingsoon",props:["StartDate","mode"],data:function(){return{comingsoon:!1,date:{total:0,days:0,hours:0,minutes:0,seconds:0}}},mounted:function(){function r(e,o){return(e=""+e).length>=o?e:r("0"+e,o)}var a=this,c=setInterval(function(){var e=Date.parse(new Date(a.StartDate))-Date.parse(new Date),o=Math.floor(e/1e3%60),t=Math.floor(e/1e3/60%60),n=Math.floor(e/36e5%24),i=Math.floor(e/864e5);a.date={total:e,days:r(i,2),hours:r(n,2),minutes:r(t,2),seconds:r(o,2)},a.date.total<=0||"Testing"==a.mode?(clearInterval(c),a.comingsoon=!1):a.comingsoon=!0},1e3)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
