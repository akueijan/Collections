"use strict";var index_view=new Vue({el:"#app",data:{},methods:{},mounted:function(){var s={x:0,y:0,eyes:"sorrow",eyesInt:0,mouth:"",mouthInt:0,leftHand:.01,rightHand:.01},e=new dat.GUI;e.add(s,"x",-100,100),e.add(s,"y",-45,45);var n=e.add(s,"eyes",["Fun","Angry","Joy","Sorrow"]);e.add(s,"eyesInt",0,10),e.add(s,"mouth",["A","O"]),e.add(s,"mouthInt",0,10),e.add(s,"leftHand",0,10),e.add(s,"rightHand",0,10);var o=document.getElementById("canvas"),u=new THREE.Scene,E=new THREE.PerspectiveCamera(90,o.clientWidth/o.clientHeight,.1,1e3);E.position.set(0,1,-.8),E.rotation.set(0,Math.PI,0);var m=new THREE.WebGLRenderer;m.setPixelRatio(window.devicePixelRatio),m.setSize(o.clientWidth,o.clientHeight),m.setClearColor(8372223,1),o.appendChild(m.domElement);e=new THREE.DirectionalLight(16777215);e.position.set(-1,1,-1).normalize(),u.add(e);var H=new THREE.Object3D;E.add(H),console.log(H);e=new THREE.GLTFLoader;e.crossOrigin="anonymous",e.load("./static/alicia.vrm",function(e){THREE.VRM.from(e).then(function(e){u.add(e.scene),console.log(e),e.lookAt.target=H;for(var n=[new THREE.IK,new THREE.IK],o=[new THREE.IKChain,new THREE.IKChain],t=[],a=[],i=[],r=[[THREE.VRMSchema.HumanoidBoneName.LeftUpperArm,THREE.VRMSchema.HumanoidBoneName.LeftLowerArm,THREE.VRMSchema.HumanoidBoneName.LeftHand],[THREE.VRMSchema.HumanoidBoneName.RightUpperArm,THREE.VRMSchema.HumanoidBoneName.RightLowerArm,THREE.VRMSchema.HumanoidBoneName.RightHand]],d=0;d<2;d++){var s=new THREE.Mesh(new THREE.SphereGeometry(0),new THREE.MeshBasicMaterial({color:16711680}));s.position.x=-.2;var E=new THREE.Object3D;E.add(s),E.position.x=0==d?-.3:.3,E.position.y=1.2,E.position.z=-.3,u.add(E),t.push(E);for(var m=[],h=[],c=0;c<3;c++){var l=new THREE.Bone,R=e.humanoid.getBoneNode(r[d][c]);0==c?R.getWorldPosition(l.position):(l.position.set(R.position.x,R.position.y,R.position.z),m[c-1].add(l)),m.push(l),h.push(R);R=2===c?s:null;o[d].add(new THREE.IKJoint(l,{}),{target:R})}n[d].add(o[d]),a.push(m),i.push(h),u.add(n[d].getRootBone())}e.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.Sorrow,0),e.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.A,0),S(e,n,t,a,i)})});function h(e,n,o){var t=new THREE.Quaternion;t.setFromAxisAngle(new THREE.Vector3(0,1,0),o),n[0].setRotationFromQuaternion(e[0].quaternion.multiply(t)),n[1].setRotationFromQuaternion(e[1].quaternion),n[2].setRotationFromQuaternion(e[2].quaternion)}document.body.addEventListener("keydown",function(e){switch(console.log(e.keyCode),e.keyCode){case 39:s.x+=2;break;case 37:s.x-=2;break;case 38:s.y+=1;break;case 40:--s.y}},!1);var c=new THREE.Clock,l=THREE.VRMSchema.BlendShapePresetName.Sorrow,R=null,p=!1;n.onChange(function(e){switch(console.log(e),e){case"Fun":l=THREE.VRMSchema.BlendShapePresetName.Fun;break;case"Angry":l=THREE.VRMSchema.BlendShapePresetName.Angry;break;case"Joy":l=THREE.VRMSchema.BlendShapePresetName.Joy;break;case"Sorrow":l=THREE.VRMSchema.BlendShapePresetName.Sorrow}T=p=!0});var w=0,T=!0,S=function e(n,o,t,a,i){var r=c.getDelta(),d=n.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Head);d.rotation.x=y,d.rotation.y=g,R=s.eyesInt/10,p&&(R=.01*w,T?100<=(w+=3)&&(T=!1):(w-=3)<=0&&(w=0)),t[0].rotation.z=s.leftHand/2,t[1].rotation.z=s.rightHand/2,o[0].solve(),o[1].solve(),h(a[0],i[0],Math.PI/2),h(a[1],i[1],-Math.PI/2),n.blendShapeProxy.setValue(l,R),n.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.A,s.mouthInt/10),n.update(r),requestAnimationFrame(function(){return e(n,o,t,a,i)}),m.render(u,E)},g=0,y=0;window.addEventListener("mousemove",function(e){g=(e.clientX-.5*o.offsetWidth)/o.offsetHeight*1,y=(e.clientY-.5*o.offsetHeight)/o.offsetHeight*-1,(g=.8<=g?.8:g)<=-.8&&(g=-.8),(y=.1<=y?.1:y)<=-.45&&(y=-.45)}),window.addEventListener("mousedown",function(e){console.log(e.button)})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
