"use strict";var index_view=new Vue({el:"#app",data:{},methods:{},mounted:function(){var h={eyes:"sorrow",eyesInt:0,mouth:"A",mouthInt:0,leftUpperArm:{x:0,y:0,z:0},leftLowerArm:{x:0,y:0,z:0},leftHand:{x:0,y:0,z:0},rightUpperArm:{x:0,y:0,z:0},rightLowerArm:{x:0,y:0,z:0},rightHand:{x:0,y:0,z:0},actionName:{none:!1,walk:!1,run:!1},actionEyes:{fun:!1,angry:!1,joy:!1,sorrow:!1}},e=new dat.GUI;e.add(h,"eyesInt",0,10),e.add(h,"mouth",["A","O"]),e.add(h,"mouthInt",0,10);var r=e.addFolder("leftUpperArm");r.add(h.leftUpperArm,"x",0,1),r.add(h.leftUpperArm,"y",-2,1),r.add(h.leftUpperArm,"z",-1,1);r=e.addFolder("leftLowerArm");r.add(h.leftLowerArm,"x",-1,1),r.add(h.leftLowerArm,"y",-5,0),r.add(h.leftLowerArm,"z",-1,1);r=e.addFolder("leftHand");r.add(h.leftHand,"x",0,1),r.add(h.leftHand,"y",-2,0),r.add(h.leftHand,"z",0,1);r=e.addFolder("rightUpperArm");r.add(h.rightUpperArm,"x",0,1),r.add(h.rightUpperArm,"y",-2,1),r.add(h.rightUpperArm,"z",-1,1);r=e.addFolder("rightLowerArm");r.add(h.rightLowerArm,"x",0,1),r.add(h.rightLowerArm,"y",-5,0),r.add(h.rightLowerArm,"z",0,1);r=e.addFolder("rightHand");r.add(h.rightHand,"x",0,1),r.add(h.rightHand,"y",-2,0),r.add(h.rightHand,"z",0,1);var t=void 0,n=void 0,r=e.addFolder("Actions");r.add(h.actionName,"none").name("none").listen().onChange(function(){E("none"),t={hierarchy:[{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,60*Math.PI/180)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,60*Math.PI/180)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,-60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,-60*Math.PI/180)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,-60*Math.PI/180)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,0,0)).toArray(),time:1200}]}]},n=[THREE.VRMSchema.HumanoidBoneName.LeftUpperArm,THREE.VRMSchema.HumanoidBoneName.RightUpperArm,THREE.VRMSchema.HumanoidBoneName.LeftUpperLeg,THREE.VRMSchema.HumanoidBoneName.RightUpperLeg],R(d,t,n),u.stop()}),r.add(h.actionName,"walk").name("walk").listen().onChange(function(){E("walk"),t={hierarchy:[{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,-40*Math.PI/180,60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,40*Math.PI/180,60*Math.PI/180)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,-40*Math.PI/180,60*Math.PI/180)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,-40*Math.PI/180,-60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,40*Math.PI/180,-60*Math.PI/180)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(0,-40*Math.PI/180,-60*Math.PI/180)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-10*Math.PI/180,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(10*Math.PI/180,0,0)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-10*Math.PI/180,0,0)).toArray(),time:1200}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(10*Math.PI/180,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-10*Math.PI/180,0,0)).toArray(),time:600},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(10*Math.PI/180,0,0)).toArray(),time:1200}]}]},n=[THREE.VRMSchema.HumanoidBoneName.LeftUpperArm,THREE.VRMSchema.HumanoidBoneName.RightUpperArm,THREE.VRMSchema.HumanoidBoneName.LeftUpperLeg,THREE.VRMSchema.HumanoidBoneName.RightUpperLeg],R(d,t,n),u.play()}),r.add(h.actionName,"run").name("run").listen().onChange(function(){E("run");var e=450;t={hierarchy:[{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-60*Math.PI/180,-40*Math.PI/180,60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(40*Math.PI/180,-40*Math.PI/180,60*Math.PI/180)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-60*Math.PI/180,-40*Math.PI/180,60*Math.PI/180)).toArray(),time:900}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(60*Math.PI/180,-40*Math.PI/180,-60*Math.PI/180)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-40*Math.PI/180,-40*Math.PI/180,-60*Math.PI/180)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(60*Math.PI/180,-40*Math.PI/180,-60*Math.PI/180)).toArray(),time:900}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(.9,-90*Math.PI/180,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(1,-90*Math.PI/180,0)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(.9,-90*Math.PI/180,0)).toArray(),time:900}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-.8,90*Math.PI/180,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-.9,90*Math.PI/180,0)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-.8,90*Math.PI/180,0)).toArray(),time:900}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-10*Math.PI/180,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(60*Math.PI/180,0,0)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-10*Math.PI/180,0,0)).toArray(),time:900}]},{keys:[{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(10*Math.PI/180,0,0)).toArray(),time:0},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(-60*Math.PI/180,0,0)).toArray(),time:e},{rot:(new THREE.Quaternion).setFromEuler(new THREE.Euler(10*Math.PI/180,0,0)).toArray(),time:900}]}]},n=[THREE.VRMSchema.HumanoidBoneName.LeftUpperArm,THREE.VRMSchema.HumanoidBoneName.RightUpperArm,THREE.VRMSchema.HumanoidBoneName.LeftLowerArm,THREE.VRMSchema.HumanoidBoneName.RightLowerArm,THREE.VRMSchema.HumanoidBoneName.LeftUpperLeg,THREE.VRMSchema.HumanoidBoneName.RightUpperLeg],R(d,t,n),u.play()});var o,a=e.addFolder("Eyes");for(o in h.actionEyes)!function(e){a.add(h.actionEyes,e).name(e).listen().onChange(function(){E(e),"fun"===e&&p(d,THREE.VRMSchema.BlendShapePresetName.Fun),"angry"===e&&p(d,THREE.VRMSchema.BlendShapePresetName.Angry),"joy"===e&&p(d,THREE.VRMSchema.BlendShapePresetName.Joy),"sorrow"===e&&p(d,THREE.VRMSchema.BlendShapePresetName.Sorrow),H.loop=THREE.LoopOnce,H.LoopOnce=!0,H.clampWhenFinished=!0,H.play()})}(o);function E(e){for(var r in h.actionName)h.actionName[r]=!1;for(var t in h.actionEyes)h.actionEyes[t]=!1;h.actionName[e]=!0,h.actionEyes[e]=!0}var m=document.getElementById("canvas"),l=new THREE.Scene,T=new THREE.PerspectiveCamera(90,m.clientWidth/m.clientHeight,.1,1e3);T.position.set(0,1,-1);var w=new THREE.WebGLRenderer;w.setPixelRatio(window.devicePixelRatio),w.setSize(m.clientWidth,m.clientHeight),w.setClearColor(2171169,1),m.appendChild(w.domElement),console.log("render: ",w);e=new THREE.OrbitControls(T,w.domElement);e.screenSpacePanning=!0,e.target.set(0,1,0),e.update();e=new THREE.DirectionalLight(16777215);e.position.set(-1,1,-1).normalize(),l.add(e);var i=new THREE.Object3D;T.add(i);e=new THREE.GLTFLoader;e.crossOrigin="anonymous";var d=void 0,s=void 0,u=void 0,c=void 0,H=void 0;e.load("./static/alicia.vrm",function(e){THREE.VRM.from(e).then(function(e){l.add(e.scene),console.log(e),(d=e).lookAt.target=i;var r=[new THREE.IK,new THREE.IK];new THREE.IKChain,new THREE.IKChain,THREE.VRMSchema.HumanoidBoneName.LeftUpperArm,THREE.VRMSchema.HumanoidBoneName.LeftLowerArm,THREE.VRMSchema.HumanoidBoneName.LeftHand,THREE.VRMSchema.HumanoidBoneName.RightUpperArm,THREE.VRMSchema.HumanoidBoneName.RightLowerArm,THREE.VRMSchema.HumanoidBoneName.RightHand;e.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.Sorrow,0),e.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.A,0),M(e,r,[],[],[])})});e=new THREE.GridHelper(10,10);l.add(e);e=new THREE.AxesHelper(5);l.add(e);document.body;var y=new THREE.Clock,R=function(r,e,t){t=t.map(function(e){return r.humanoid.getBoneNode(e)}),t=THREE.AnimationClip.parseAnimation(e,t);t.tracks.some(function(e){e.name=e.name.replace(/^\.bones\[([^\]]+)\].(position|quaternion|scale)$/,"$1.$2")}),s=new THREE.AnimationMixer(r.scene),u=s.clipAction(t),console.log(t)},p=function(e,r){r=new THREE.NumberKeyframeTrack(e.blendShapeProxy.getBlendShapeTrackName(r),[0,.3,.6],[0,1,0]);c=new THREE.AnimationMixer(e.scene);r=new THREE.AnimationClip("blink",1,[r]);H=c.clipAction(r)},A=(new Date).getTime(),M=function e(r,t,n,o,a){var E=y.getDelta(),m=(r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Head),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Jaw),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Neck),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Chest),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.Hips),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftEye),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftFoot),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftHand)),i=r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftLowerArm),d=(r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftLowerLeg),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftUpperArm)),u=(r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.LeftUpperLeg),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightEye),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightFoot),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightHand)),H=r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightLowerArm),R=(r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightLowerLeg),r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightUpperArm));r.humanoid.getBoneNode(THREE.VRMSchema.HumanoidBoneName.RightUpperLeg);d.rotation.x=h.leftUpperArm.x,d.rotation.y=h.leftUpperArm.y,d.rotation.z=h.leftUpperArm.z,i.rotation.x=h.leftLowerArm.x,i.rotation.y=h.leftLowerArm.y,i.rotation.z=h.leftLowerArm.z,m.rotation.x=h.leftHand.x,m.rotation.y=h.leftHand.y,m.rotation.z=h.leftHand.z,R.rotation.x=h.rightUpperArm.x,R.rotation.y=-h.rightUpperArm.y,R.rotation.z=-h.rightUpperArm.z,H.rotation.x=h.rightLowerArm.x,H.rotation.y=-h.rightLowerArm.y,H.rotation.z=-h.rightLowerArm.z,u.rotation.x=h.rightHand.x,u.rotation.y=-h.rightHand.y,u.rotation.z=-h.rightHand.z;H=(new Date).getTime(),u=H-A;s&&s.update(u),c&&c.update(E),A=H,r.blendShapeProxy.setValue(THREE.VRMSchema.BlendShapePresetName.A,h.mouthInt/10),r.update(E),requestAnimationFrame(function(){return e(r,t,n,o,a)}),w.render(l,T)},g=0,N=0;m.addEventListener("mousemove",function(e){g=(e.clientX-.5*m.offsetWidth)/m.offsetHeight*1,N=(e.clientY-.5*m.offsetHeight)/m.offsetHeight*-1,(g=.8<=g?.8:g)<=-.8&&(g=-.8),(N=.1<=N?.1:N)<=-.45&&(N=-.45)})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImluZGV4X3ZpZXciLCJWdWUiLCJlbCIsIm1ldGhvZHMiLCJtb3VudGVkIiwiY29udHJvbCIsImV5ZXNJbnQiLCJleWVzIiwibW91dGhJbnQiLCJsZWZ0VXBwZXJBcm0iLCJ4IiwieSIsImxlZnRMb3dlckFybSIsInoiLCJsZWZ0SGFuZCIsInJpZ2h0VXBwZXJBcm0iLCJyaWdodExvd2VyQXJtIiwicmlnaHRIYW5kIiwiYWN0aW9uTmFtZSIsIm5vbmUiLCJ3YWxrIiwicnVuIiwiYW5ncnkiLCJmdW4iLCJqb3kiLCJzb3Jyb3ciLCJkYXQiLCJHVUkiLCJsZWZ0VXBwZXJBcm1Gb2xkZXIiLCJhZGRGb2xkZXIiLCJhZGQiLCJsZWZ0TG93ZXJBcm1Gb2xkZXIiLCJndWkiLCJsZWZ0SGFuZEZvbGRlciIsInJpZ2h0VXBwZXJBcm1Gb2xkZXIiLCJyaWdodExvd2VyQXJtRm9sZGVyIiwicmlnaHRIYW5kRm9sZGVyIiwiYWN0aW9uQW5pIiwidW5kZWZpbmVkIiwic2V0Q2hlY2tlZCIsImhpZXJhcmNoeSIsImtleXMiLCJuYW1lIiwibGlzdGVuIiwib25DaGFuZ2UiLCJRdWF0ZXJuaW9uIiwiVEhSRUUiLCJzZXRGcm9tRXVsZXIiLCJFdWxlciIsIk1hdGgiLCJ0b0FycmF5IiwiUEkiLCJ0aW1lIiwicm90IiwiYWN0aW9uYm9uZXMiLCJWUk1TY2hlbWEiLCJIdW1hbm9pZEJvbmVOYW1lIiwiTGVmdFVwcGVyQXJtIiwiUmlnaHRVcHBlckFybSIsIkxlZnRVcHBlckxlZyIsIlJpZ2h0VXBwZXJMZWciLCJzZXR1cEFuaW1hdGlvbiIsImN1cnJlbnRWcm0iLCJjdXJyZW50QWN0aW9uIiwic3RvcCIsInNlY29uZCIsImFjdGlvbkZvbGRlciIsImV5ZW5hbWUiLCJhY3Rpb25FeWVzIiwiYWN0aW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImNhbnZhcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiV2ViR0xSZW5kZXJlciIsImRldmljZVBpeGVsUmF0aW8iLCJkb21FbGVtZW50IiwiRGlyZWN0aW9uYWxMaWdodCIsIk9iamVjdDNEIiwiR0xURkxvYWRlciIsInZybSIsIkxlZnRMb3dlckFybSIsIlJpZ2h0TG93ZXJBcm0iLCJwbGF5Iiwibm9kZXNMaXN0IiwiYm9uZU5hbWUiLCJleWVzQW5pbWF0aW9uIiwiQmxlbmRTaGFwZVByZXNldE5hbWUiLCJGdW4iLCJBbmdyeSIsIkpveSIsIlNvcnJvdyIsImV5ZUFjdGlvbiIsImxvb3AiLCJMb29wT25jZSIsImNsYW1wV2hlbkZpbmlzaGVkIiwiX2xvb3AiLCJwcm9wIiwiZG9jdW1lbnQiLCJzY2VuZSIsIlNjZW5lIiwiY2FtZXJhIiwicG9zaXRpb24iLCJzZXQiLCJyZW5kZXJlciIsInNldFBpeGVsUmF0aW8iLCJ3aW5kb3ciLCJzZXRTaXplIiwic2V0Q2xlYXJDb2xvciIsImJsZW5kU2hhcGVQcm94eSIsInNldFZhbHVlIiwiY29udHJvbHMiLCJpa0xpc3QiLCJwaXZvdExpc3QiLCJzY3JlZW5TcGFjZVBhbm5pbmciLCJ0YXJnZXQiLCJ1cGRhdGUiLCJncmlkSGVscGVyIiwiYXhlc0hlbHBlciIsIkF4ZXNIZWxwZXIiLCJ1cGRhdGVBcm0iLCJib25lcyIsImxvYWRlciIsInNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJub2RlcyIsImN1cnJlbnRNaXhlciIsImNvbnNvbGUiLCJnbHRmIiwiVlJNIiwiZnJvbSIsInRoZW4iLCJsb2ciLCJsb29rQXQiLCJsb29rQXRUYXJnZXQiLCJJSyIsIklLQ2hhaW4iLCJtYXAiLCJodW1hbm9pZCIsImdldEJvbmVOb2RlIiwiTGVmdEhhbmQiLCJBbmltYXRpb25DbGlwIiwicGFyc2VBbmltYXRpb24iLCJSaWdodEhhbmQiLCJBIiwiR3JpZEhlbHBlciIsInJvdGF0aW9uIiwiYm9keSIsImNsb2NrIiwiQ2xvY2siLCJjbGlwIiwiRGF0ZSIsImdldFRpbWUiLCJ0cmFja3MiLCJzb21lIiwidHJhY2siLCJyZXBsYWNlIiwiQW5pbWF0aW9uTWl4ZXIiLCJjbGlwQWN0aW9uIiwiZXllQWN0aW9uQW5pIiwiYmxpbmtUcmFjayIsIk51bWJlcktleWZyYW1lVHJhY2siLCJnZXRCbGVuZFNoYXBlVHJhY2tOYW1lIiwiZXllQ3VycmVudE1peGVyIiwib2Zmc2V0WCIsImNsaWVudFgiLCJvZmZzZXRXaWR0aCIsImJvbmVzTGlzdCIsImRlbHRhVGltZSIsImdldERlbHRhIiwiSGVhZCIsIkphdyIsIk5lY2siLCJDaGVzdCIsIkhpcHMiLCJMZWZ0RXllIiwiTGVmdEZvb3QiLCJMZWZ0TG93ZXJMZWciLCJSaWdodEV5ZSIsIlJpZ2h0Rm9vdCIsIlJpZ2h0TG93ZXJMZWciLCJkZWx0YSIsImxhc3RUaW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVuZGVyIiwib2Zmc2V0WSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIm9mZnNldEhlaWdodCIsImNsaWVudFkiXSwibWFwcGluZ3MiOiJhQUFBLElBQUlBLFdBQWEsSUFBSUMsSUFBSSxDQUNyQkMsR0FBSSxPQURKRixLQUFBQSxHQUtBRyxRQUxxQixHQVVqQkMsUUFBSUMsV0FFQUMsSUFBQUEsRUFGVSxDQUdMQyxLQUhLLFNBSVZDLFFBSlUsRUFLVkMsTUFBWSxJQUFFRCxTQUFBLEVBQUFDLGFBQUEsQ0FHUEMsRUFBQSxFQVJHQyxFQUFBLEVBVVZDLEVBQVksR0FBRUEsYUFBQSxDQUdQRixFQUFBLEVBYkdDLEVBQUEsRUFlQUUsRUFBQSxHQUFBQyxTQUFBLENBR0hKLEVBQUEsRUFsQkdDLEVBQUEsRUFvQlZJLEVBQWEsR0FBRUEsY0FBQSxDQUdSTCxFQUFBLEVBdkJHQyxFQUFBLEVBeUJWSyxFQUFhLEdBQUVBLGNBQUEsQ0FHUk4sRUFBQSxFQTVCR0MsRUFBQSxFQThCREUsRUFBRSxHQUFBSSxVQUFBLENBR0pQLEVBQUEsRUFqQ0dDLEVBQUEsRUFtQ0FFLEVBQUUsR0FFSkssV0FGSSxDQUdIQyxNQUFBLEVBdENDQyxNQUFBLEVBd0NBQyxLQUFFLEdBRVJDLFdBRlEsQ0FHSEMs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LEVBQU1FLFFBQVUsR0FBTXJILEVBQU9vSCxjQUFpQnBILEVBQU9vSCxjQUFrQixHQUVqRnhCLEVBRFUsSUFBWEEsRUFDVyxHQUVYQSxLQUFZLEtBQ1hBLEdBQVcsS0FHWHFCLEVBRFUsSUFBWEEsRUFDVyxHQUVYQSxLQUFZLE1BQ1hBLEdBQVciLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5kZXhfdmlldyA9IG5ldyBWdWUoe1xyXG4gICAgZWw6IFwiI2FwcFwiLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIFxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBcclxuICAgIH0sXHJcbiAgICBtb3VudGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyB0aGlzLnByb2pBcGkucG9zdCh1cmksIGRhdGEpICAvL0V4XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSB7XHJcbiAgICAgICAgICAgIGV5ZXM6ICdzb3Jyb3cnLFxyXG4gICAgICAgICAgICBleWVzSW50OiAwLFxyXG4gICAgICAgICAgICBtb3V0aDogJ0EnLFxyXG4gICAgICAgICAgICBtb3V0aEludDogMCxcclxuICAgICAgICAgICAgbGVmdFVwcGVyQXJtOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgICAgIHo6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVmdExvd2VyQXJtOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgICAgIHo6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVmdEhhbmQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICAgICAgejogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByaWdodFVwcGVyQXJtOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgICAgIHo6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmlnaHRMb3dlckFybToge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgICAgICB6OiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJpZ2h0SGFuZDoge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgICAgICB6OiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFjdGlvbk5hbWU6IHtcclxuICAgICAgICAgICAgICAgIG5vbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgd2FsazogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBydW46IGZhbHNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY3Rpb25FeWVzOiB7XHJcbiAgICAgICAgICAgICAgICBmdW46IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYW5ncnk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgam95OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNvcnJvdzogZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgZ3VpID0gbmV3IGRhdC5HVUkoKVxyXG4gICAgICAgIC8vIGxldCBjb25FeWVzID0gZ3VpLmFkZChjb250cm9sLCAnZXllcycsIFsnRnVuJywgJ0FuZ3J5JywgJ0pveScsICdTb3Jyb3cnXSlcclxuICAgICAgICBndWkuYWRkKGNvbnRyb2wsICdleWVzSW50JywgMCwgMTApXHJcbiAgICAgICAgZ3VpLmFkZChjb250cm9sLCAnbW91dGgnLCBbJ0EnLCAnTyddKVxyXG4gICAgICAgIGd1aS5hZGQoY29udHJvbCwgJ21vdXRoSW50JywgMCwgMTApXHJcbiAgICAgICAgbGV0IGxlZnRVcHBlckFybUZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ2xlZnRVcHBlckFybScpXHJcbiAgICAgICAgICAgIGxlZnRVcHBlckFybUZvbGRlci5hZGQoY29udHJvbC5sZWZ0VXBwZXJBcm0sICd4JywgMCwgMS4wKVxyXG4gICAgICAgICAgICBsZWZ0VXBwZXJBcm1Gb2xkZXIuYWRkKGNvbnRyb2wubGVmdFVwcGVyQXJtLCAneScsIC0yLjAsIDEuMClcclxuICAgICAgICAgICAgbGVmdFVwcGVyQXJtRm9sZGVyLmFkZChjb250cm9sLmxlZnRVcHBlckFybSwgJ3onLCAtMS4wLCAxLjApXHJcbiAgICAgICAgbGV0IGxlZnRMb3dlckFybUZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ2xlZnRMb3dlckFybScpXHJcbiAgICAgICAgICAgIGxlZnRMb3dlckFybUZvbGRlci5hZGQoY29udHJvbC5sZWZ0TG93ZXJBcm0sICd4JywgLTEuMCwgMS4wKVxyXG4gICAgICAgICAgICBsZWZ0TG93ZXJBcm1Gb2xkZXIuYWRkKGNvbnRyb2wubGVmdExvd2VyQXJtLCAneScsIC01LjAsIDApXHJcbiAgICAgICAgICAgIGxlZnRMb3dlckFybUZvbGRlci5hZGQoY29udHJvbC5sZWZ0TG93ZXJBcm0sICd6JywgLTEuMCwgMS4wKVxyXG4gICAgICAgIGxldCBsZWZ0SGFuZEZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ2xlZnRIYW5kJylcclxuICAgICAgICAgICAgbGVmdEhhbmRGb2xkZXIuYWRkKGNvbnRyb2wubGVmdEhhbmQsICd4JywgMCwgMSlcclxuICAgICAgICAgICAgbGVmdEhhbmRGb2xkZXIuYWRkKGNvbnRyb2wubGVmdEhhbmQsICd5JywgLTIsIDApXHJcbiAgICAgICAgICAgIGxlZnRIYW5kRm9sZGVyLmFkZChjb250cm9sLmxlZnRIYW5kLCAneicsIDAsIDEpXHJcbiAgICAgICAgbGV0IHJpZ2h0VXBwZXJBcm1Gb2xkZXIgPSBndWkuYWRkRm9sZGVyKCdyaWdodFVwcGVyQXJtJylcclxuICAgICAgICAgICAgcmlnaHRVcHBlckFybUZvbGRlci5hZGQoY29udHJvbC5yaWdodFVwcGVyQXJtLCAneCcsIDAsIDEuMClcclxuICAgICAgICAgICAgcmlnaHRVcHBlckFybUZvbGRlci5hZGQoY29udHJvbC5yaWdodFVwcGVyQXJtLCAneScsIC0yLjAsIDEuMClcclxuICAgICAgICAgICAgcmlnaHRVcHBlckFybUZvbGRlci5hZGQoY29udHJvbC5yaWdodFVwcGVyQXJtLCAneicsIC0xLjAsIDEuMClcclxuICAgICAgICBsZXQgcmlnaHRMb3dlckFybUZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ3JpZ2h0TG93ZXJBcm0nKVxyXG4gICAgICAgICAgICByaWdodExvd2VyQXJtRm9sZGVyLmFkZChjb250cm9sLnJpZ2h0TG93ZXJBcm0sICd4JywgMCwgMS4wKVxyXG4gICAgICAgICAgICByaWdodExvd2VyQXJtRm9sZGVyLmFkZChjb250cm9sLnJpZ2h0TG93ZXJBcm0sICd5JywgLTUuMCwgMClcclxuICAgICAgICAgICAgcmlnaHRMb3dlckFybUZvbGRlci5hZGQoY29udHJvbC5yaWdodExvd2VyQXJtLCAneicsIDAsIDEuMClcclxuICAgICAgICBsZXQgcmlnaHRIYW5kRm9sZGVyID0gZ3VpLmFkZEZvbGRlcigncmlnaHRIYW5kJylcclxuICAgICAgICAgICAgcmlnaHRIYW5kRm9sZGVyLmFkZChjb250cm9sLnJpZ2h0SGFuZCwgJ3gnLCAwLCAxKVxyXG4gICAgICAgICAgICByaWdodEhhbmRGb2xkZXIuYWRkKGNvbnRyb2wucmlnaHRIYW5kLCAneScsIC0yLCAwKVxyXG4gICAgICAgICAgICByaWdodEhhbmRGb2xkZXIuYWRkKGNvbnRyb2wucmlnaHRIYW5kLCAneicsIDAsIDEpXHJcbiAgICAgICAgLy8gbGVmdFVwcGVyQXJtRm9sZGVyLmFkZChjb250cm9sLmxlZnRVcHBlckFybSwgJ3knLCAwLCAxMClcclxuICAgICAgICAvLyBsZWZ0VXBwZXJBcm1Gb2xkZXIuYWRkKGNvbnRyb2wubGVmdFVwcGVyQXJtLCAneicsIDAsIDEwKVxyXG5cclxuICAgICAgICBsZXQgYWN0aW9uQW5pID0gdW5kZWZpbmVkXHJcbiAgICAgICAgbGV0IGFjdGlvbmJvbmVzID0gdW5kZWZpbmVkXHJcbiAgICAgICAgbGV0IGFjdGlvbkZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ0FjdGlvbnMnKVxyXG4gICAgICAgICAgICBhY3Rpb25Gb2xkZXIuYWRkKGNvbnRyb2wuYWN0aW9uTmFtZSwgJ25vbmUnKS5uYW1lKCdub25lJykubGlzdGVuKCkub25DaGFuZ2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0Q2hlY2tlZCgnbm9uZScpXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25BbmkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIDAsIDYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIDAsIDYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiA2MDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDEyMDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigwLCAwLCAtNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgLTYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiA2MDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgLTYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAxMjAwICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiA2MDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMTIwMCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIDAsIDApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogNjAwICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIDAsIDApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDEyMDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25ib25lcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0VXBwZXJBcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRVcHBlckFybSxcclxuICAgICAgICAgICAgICAgICAgICBUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0VXBwZXJMZWcsXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRVcHBlckxlZyxcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIHNldHVwQW5pbWF0aW9uKGN1cnJlbnRWcm0sIGFjdGlvbkFuaSwgYWN0aW9uYm9uZXMpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QWN0aW9uLnN0b3AoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBhY3Rpb25Gb2xkZXIuYWRkKGNvbnRyb2wuYWN0aW9uTmFtZSwgJ3dhbGsnKS5uYW1lKCd3YWxrJykubGlzdGVuKCkub25DaGFuZ2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0Q2hlY2tlZCgnd2FsaycpXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25BbmkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIC00MCpNYXRoLlBJLzE4MCwgNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgNDAqTWF0aC5QSS8xODAsIDYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiA2MDAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoMCwgLTQwKk1hdGguUEkvMTgwLCA2MCpNYXRoLlBJLzE4MCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMTIwMCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIC00MCpNYXRoLlBJLzE4MCwgLTYwKk1hdGguUEkvMTgwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAsIDQwKk1hdGguUEkvMTgwLCAtNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDYwMCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigwLCAtNDAqTWF0aC5QSS8xODAsIC02MCpNYXRoLlBJLzE4MCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMTIwMCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC0xMCpNYXRoLlBJLzE4MCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigxMCpNYXRoLlBJLzE4MCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogNjAwICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC0xMCpNYXRoLlBJLzE4MCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMTIwMCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC0xMCpNYXRoLlBJLzE4MCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogNjAwICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAxMjAwICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWN0aW9uYm9uZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdFVwcGVyQXJtLFxyXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJBcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdFVwcGVyTGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJMZWcsXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICBzZXR1cEFuaW1hdGlvbihjdXJyZW50VnJtLCBhY3Rpb25BbmksIGFjdGlvbmJvbmVzKVxyXG4gICAgICAgICAgICAgICAgY3VycmVudEFjdGlvbi5wbGF5KClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgYWN0aW9uRm9sZGVyLmFkZChjb250cm9sLmFjdGlvbk5hbWUsICdydW4nKS5uYW1lKCdydW4nKS5saXN0ZW4oKS5vbkNoYW5nZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRDaGVja2VkKCdydW4nKVxyXG4gICAgICAgICAgICAgICAgbGV0IHNlY29uZCA9IDQ1MFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uQW5pID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZXJhcmNoeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigtNjAqTWF0aC5QSS8xODAsIC00MCpNYXRoLlBJLzE4MCwgNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoNDAqTWF0aC5QSS8xODAsIC00MCpNYXRoLlBJLzE4MCwgNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNlY29uZCAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC02MCpNYXRoLlBJLzE4MCwgLTQwKk1hdGguUEkvMTgwLCA2MCpNYXRoLlBJLzE4MCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc2Vjb25kKjIgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcig2MCpNYXRoLlBJLzE4MCwgLTQwKk1hdGguUEkvMTgwLCAtNjAqTWF0aC5QSS8xODApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoLTQwKk1hdGguUEkvMTgwLCAtNDAqTWF0aC5QSS8xODAsIC02MCpNYXRoLlBJLzE4MCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDYwKk1hdGguUEkvMTgwLCAtNDAqTWF0aC5QSS8xODAsIC02MCpNYXRoLlBJLzE4MCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc2Vjb25kKjIgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigwLjksIC05MCpNYXRoLlBJLzE4MCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3Q6IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKG5ldyBUSFJFRS5FdWxlcigxLjAsIC05MCpNYXRoLlBJLzE4MCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDAuOSwgLTkwKk1hdGguUEkvMTgwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzZWNvbmQqMiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC0wLjgsIDkwKk1hdGguUEkvMTgwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC0wLjksIDkwKk1hdGguUEkvMTgwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoLTAuOCwgOTAqTWF0aC5QSS8xODAsIDApKS50b0FycmF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHNlY29uZCoyICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoLTEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDYwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90OiBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlcihuZXcgVEhSRUUuRXVsZXIoLTEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzZWNvbmQqMiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKC02MCpNYXRoLlBJLzE4MCwgMCwgMCkpLnRvQXJyYXkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogc2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdDogbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIobmV3IFRIUkVFLkV1bGVyKDEwKk1hdGguUEkvMTgwLCAwLCAwKSkudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBzZWNvbmQqMiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWN0aW9uYm9uZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdFVwcGVyQXJtLFxyXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJBcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdExvd2VyQXJtLFxyXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0TG93ZXJBcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdFVwcGVyTGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJMZWcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdExvd2VyTGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0TG93ZXJMZWcsXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICBzZXR1cEFuaW1hdGlvbihjdXJyZW50VnJtLCBhY3Rpb25BbmksIGFjdGlvbmJvbmVzKVxyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudEFjdGlvbi5sb29wID0gVEhSRUUuTG9vcE9uY2VcclxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRBY3Rpb24uTG9vcE9uY2UgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50QWN0aW9uLmNsYW1wV2hlbkZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgY3VycmVudEFjdGlvbi5wbGF5KClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZXllRm9sZGVyID0gZ3VpLmFkZEZvbGRlcignRXllcycpXHJcbiAgICAgICAgICAgIGZvcihsZXQgZXllbmFtZSBpbiBjb250cm9sLmFjdGlvbkV5ZXMpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdleWUgJywgZXllbmFtZSlcclxuICAgICAgICAgICAgICAgIGV5ZUZvbGRlci5hZGQoY29udHJvbC5hY3Rpb25FeWVzLCBleWVuYW1lKS5uYW1lKGV5ZW5hbWUpLmxpc3RlbigpLm9uQ2hhbmdlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRDaGVja2VkKGV5ZW5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXllbmFtZSA9PT0gJ2Z1bicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXllc0FuaW1hdGlvbihjdXJyZW50VnJtLCBUSFJFRS5WUk1TY2hlbWEuQmxlbmRTaGFwZVByZXNldE5hbWUuRnVuKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihleWVuYW1lID09PSAnYW5ncnknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV5ZXNBbmltYXRpb24oY3VycmVudFZybSwgVEhSRUUuVlJNU2NoZW1hLkJsZW5kU2hhcGVQcmVzZXROYW1lLkFuZ3J5KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihleWVuYW1lID09PSAnam95Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleWVzQW5pbWF0aW9uKGN1cnJlbnRWcm0sIFRIUkVFLlZSTVNjaGVtYS5CbGVuZFNoYXBlUHJlc2V0TmFtZS5Kb3kpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGV5ZW5hbWUgPT09ICdzb3Jyb3cnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV5ZXNBbmltYXRpb24oY3VycmVudFZybSwgVEhSRUUuVlJNU2NoZW1hLkJsZW5kU2hhcGVQcmVzZXROYW1lLlNvcnJvdylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZXllQWN0aW9uLmxvb3AgPSBUSFJFRS5Mb29wT25jZVxyXG4gICAgICAgICAgICAgICAgICAgIGV5ZUFjdGlvbi5Mb29wT25jZSA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICBleWVBY3Rpb24uY2xhbXBXaGVuRmluaXNoZWQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZXllQWN0aW9uLnBsYXkoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRDaGVja2VkKHByb3ApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYWN0aW9uIGluIGNvbnRyb2wuYWN0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbC5hY3Rpb25OYW1lW2FjdGlvbl0gPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGFjdGlvbiBpbiBjb250cm9sLmFjdGlvbkV5ZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuYWN0aW9uRXllc1thY3Rpb25dID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250cm9sLmFjdGlvbk5hbWVbcHJvcF0gPSB0cnVlXHJcbiAgICAgICAgICAgIGNvbnRyb2wuYWN0aW9uRXllc1twcm9wXSA9IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKVxyXG5cclxuICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXHJcblxyXG4gICAgICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwgY2FudmFzLmNsaWVudFdpZHRoL2NhbnZhcy5jbGllbnRIZWlnaHQsIDAuMSwgMTAwMClcclxuICAgICAgICBjYW1lcmEucG9zaXRpb24uc2V0KCAwLjAsIDEuMCwgLTEuMCApXHJcbiAgICAgICAgLy8gY2FtZXJhLnJvdGF0aW9uLnNldCgwLCBNYXRoLlBJLCAwKVxyXG5cclxuICAgICAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKClcclxuICAgICAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKVxyXG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUoY2FudmFzLmNsaWVudFdpZHRoLCBjYW52YXMuY2xpZW50SGVpZ2h0KVxyXG4gICAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgyMTIxMjEsIDEuMClcclxuICAgICAgICBjYW52YXMuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcclxuICAgICAgICBjb25zb2xlLmxvZygncmVuZGVyOiAnLCByZW5kZXJlcilcclxuXHJcbiAgICAgICAgLy8gY2FtZXJhIGNvbnRyb2xzXHJcbiAgICAgICAgY29uc3QgY29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyggY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50IClcclxuICAgICAgICBjb250cm9scy5zY3JlZW5TcGFjZVBhbm5pbmcgPSB0cnVlXHJcbiAgICAgICAgY29udHJvbHMudGFyZ2V0LnNldCggMC4wLCAxLjAsIDAuMCApXHJcbiAgICAgICAgY29udHJvbHMudXBkYXRlKClcclxuXHJcbiAgICAgICAgY29uc3QgbGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZilcclxuICAgICAgICBsaWdodC5wb3NpdGlvbi5zZXQoLTEsIDEsIC0xKS5ub3JtYWxpemUoKVxyXG4gICAgICAgIHNjZW5lLmFkZChsaWdodClcclxuXHJcbiAgICAgICAgY29uc3QgbG9va0F0VGFyZ2V0ID0gbmV3IFRIUkVFLk9iamVjdDNEKClcclxuICAgICAgICBjYW1lcmEuYWRkKCBsb29rQXRUYXJnZXQgKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGxvb2tBdFRhcmdldClcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuR0xURkxvYWRlcigpXHJcbiAgICAgICAgbG9hZGVyLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cydcclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnRWcm0gPSB1bmRlZmluZWRcclxuICAgICAgICBsZXQgbWl4ZXIgPSB1bmRlZmluZWRcclxuICAgICAgICBsZXQgY3VycmVudE1peGVyID0gdW5kZWZpbmVkXHJcbiAgICAgICAgbGV0IGN1cnJlbnRBY3Rpb24gPSB1bmRlZmluZWRcclxuICAgICAgICBsZXQgZXllQ3VycmVudE1peGVyID0gdW5kZWZpbmVkXHJcbiAgICAgICAgbGV0IGV5ZUFjdGlvbiA9IHVuZGVmaW5lZFxyXG5cclxuXHJcbiAgICAgICAgbG9hZGVyLmxvYWQoJy4vc3RhdGljL2FsaWNpYS52cm0nLFxyXG4gICAgICAgICAgICAoZ2x0ZikgPT4ge1xyXG4gICAgICAgICAgICAgICAgVEhSRUUuVlJNLmZyb20oZ2x0ZikudGhlbiggKHZybSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOOCt+ODvOODs+OBuOOBrui/veWKoFxyXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lLmFkZCh2cm0uc2NlbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codnJtKVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWcm0gPSB2cm1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdnJtLnNjZW5lLnBvc2l0aW9uLnggPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdnJtLnNjZW5lLnBvc2l0aW9uLnkgPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdnJtLnNjZW5lLnBvc2l0aW9uLnogPSAwLjNcclxuICAgICAgICAgICAgICAgICAgICAvLyB2cm0uc2NlbmUucm90YXRpb24ueSA9IDAuM1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2cm0ubG9va0F0LnRhcmdldCA9IGxvb2tBdFRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSUvjga7mupblgplcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWtMaXN0ID0gW25ldyBUSFJFRS5JSygpLCBuZXcgVEhSRUUuSUsoKV0gLy8gSUvjgrfjgrnjg4bjg6BcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhaW5MaXN0ID0gW25ldyBUSFJFRS5JS0NoYWluKCksIG5ldyBUSFJFRS5JS0NoYWluKCldIC8vIOODgeOCp+ODvOODs1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwaXZvdExpc3QgPSBbXSAvLyDjg5Tjg5zjg4Pjg4hcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYm9uZXNMaXN0ID0gW10gLy8g44Oc44O844OzXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVzTGlzdCA9IFtdIC8vIOODjuODvOODiVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDjg5zjg7zjg7PlkI1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYm9uZU5hbWUgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0VXBwZXJBcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRMb3dlckFybSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdEhhbmRdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRVcHBlckFybSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRMb3dlckFybSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRIYW5kXVxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIChsZXQgaiA9IDA7IGogPCAyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8g44K/44O844Ky44OD44OI44Gu55Sf5oiQXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGxldCBtb3ZpbmdUYXJnZXQgPSBuZXcgVEhSRUUuTWVzaChcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgwLjAxKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6IDB4ZmYwMDAwfSlcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBtb3ZpbmdUYXJnZXQucG9zaXRpb24ueCA9IC0wLjJcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGV0IHBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcGl2b3QuYWRkKG1vdmluZ1RhcmdldClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcGl2b3QucG9zaXRpb24ueCA9ICBqID09IDAgPyAtMC4zIDogMC4zXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHBpdm90LnBvc2l0aW9uLnkgPSAxLjJcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcGl2b3QucG9zaXRpb24ueiA9IC0wLjNcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc2NlbmUuYWRkKHBpdm90KVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBwaXZvdExpc3QucHVzaChwaXZvdClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIOODgeOCp+ODvOODs+OBrueUn+aIkFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBsZXQgYm9uZXMgPSBbXSAvLyDjg5zjg7zjg7NcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGV0IG5vZGVzID0gW10gLy8g44OO44O844OJXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIOODnOODvOODs+OBqOODjuODvOODieOBrueUn+aIkFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBsZXQgYm9uZSA9IG5ldyBUSFJFRS5Cb25lKClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGV0IG5vZGUgPSB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoYm9uZU5hbWVbal1baV0pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBub2RlLmdldFdvcmxkUG9zaXRpb24oYm9uZS5wb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGJvbmUucG9zaXRpb24uc2V0KG5vZGUucG9zaXRpb24ueCwgbm9kZS5wb3NpdGlvbi55LCBub2RlLnBvc2l0aW9uLnopXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBib25lc1tpIC0gMV0uYWRkKGJvbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYm9uZXMucHVzaChib25lKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBub2Rlcy5wdXNoKG5vZGUpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyDjg4Hjgqfjg7zjg7Pjgavov73liqBcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGV0IHRhcmdldCA9IGkgPT09IDIgPyBtb3ZpbmdUYXJnZXQgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNoYWluTGlzdFtqXS5hZGQobmV3IFRIUkVFLklLSm9pbnQoYm9uZSwge30pLCB7dGFyZ2V0fSlcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gSUvjgrfjgrnjg4bjg6Djgavjg4Hjgqfjg7zjg7Pov73liqBcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWtMaXN0W2pdLmFkZChjaGFpbkxpc3Rbal0pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyDjg6rjgrnjg4jjgavov73liqBcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYm9uZXNMaXN0LnB1c2goYm9uZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIG5vZGVzTGlzdC5wdXNoKG5vZGVzKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8g44Or44O844OI44Oc44O844Oz44Gu6L+95YqgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNjZW5lLmFkZChpa0xpc3Rbal0uZ2V0Um9vdEJvbmUoKSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIOODmOODq+ODkeODvOOBrui/veWKoFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyBsZXQgaGVscGVyID0gbmV3IElLSGVscGVyKGlrTGlzdFtqXSlcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gc2NlbmUuYWRkKGhlbHBlcilcclxuICAgICAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZybS5ibGVuZFNoYXBlUHJveHkuc2V0VmFsdWUoVEhSRUUuVlJNU2NoZW1hLkJsZW5kU2hhcGVQcmVzZXROYW1lLlNvcnJvdywgMClcclxuICAgICAgICAgICAgICAgICAgICB2cm0uYmxlbmRTaGFwZVByb3h5LnNldFZhbHVlKFRIUkVFLlZSTVNjaGVtYS5CbGVuZFNoYXBlUHJlc2V0TmFtZS5BLCAwKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cEFuaW1hdGlvbih2cm0pXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXllc0FuaW1hdGlvbih2cm0pXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHZybSwgaWtMaXN0LCBwaXZvdExpc3QsIGJvbmVzTGlzdCwgbm9kZXNMaXN0KVxyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcblxyXG4gICAgICAgIC8vIGhlbHBlclxyXG4gICAgICAgIGNvbnN0IGdyaWRIZWxwZXIgPSBuZXcgVEhSRUUuR3JpZEhlbHBlciggMTAsIDEwICk7XHJcbiAgICAgICAgc2NlbmUuYWRkKCBncmlkSGVscGVyIClcclxuXHJcbiAgICAgICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBUSFJFRS5BeGVzSGVscGVyKCA1ICk7XHJcbiAgICAgICAgc2NlbmUuYWRkKCBheGVzSGVscGVyIClcclxuXHJcbiAgICAgICAgLy8g6IWV44Gu5pu05pawXHJcbiAgICAgICAgbGV0IHVwZGF0ZUFybSA9IChib25lcywgbm9kZXMsIG9mZnNldCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKClcclxuICAgICAgICAgICAgcS5zZXRGcm9tQXhpc0FuZ2xlKCBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSwgb2Zmc2V0KVxyXG4gICAgICAgICAgICBub2Rlc1swXS5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGJvbmVzWzBdLnF1YXRlcm5pb24ubXVsdGlwbHkocSkpXHJcbiAgICAgICAgICAgIG5vZGVzWzFdLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oYm9uZXNbMV0ucXVhdGVybmlvbilcclxuICAgICAgICAgICAgbm9kZXNbMl0uc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbihib25lc1syXS5xdWF0ZXJuaW9uKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGJvZHkgPSBkb2N1bWVudC5ib2R5XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0a2V5Y29kZShlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUua2V5Q29kZSlcclxuICAgICAgICAgICAgc3dpdGNoKGUua2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sLnggKz0gMlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlIDM3OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2wueCAtPSAyXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC55ICs9IDFcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sLnkgLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZ2V0a2V5Y29kZSwgZmFsc2UpXHJcblxyXG4gICAgICAgIGxldCBjbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpXHJcblxyXG4gICAgICAgIGxldCBzZXR1cEFuaW1hdGlvbiA9ICh2cm0sIGFjdGlvbkFuaSwgYWN0aW9uYm9uZXMpID0+IHtcclxuICAgICAgICAgICAgbGV0IGJvbmVzID0gYWN0aW9uYm9uZXMubWFwKGZ1bmN0aW9uKGJvbmVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoYm9uZU5hbWUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZybS5odW1hbm9pZC5nZXRCb25lTm9kZShib25lTmFtZSlcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgY2xpcCA9IFRIUkVFLkFuaW1hdGlvbkNsaXAucGFyc2VBbmltYXRpb24oYWN0aW9uQW5pLCBib25lcylcclxuXHJcbiAgICAgICAgICAgIGNsaXAudHJhY2tzLnNvbWUoKHRyYWNrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cmFjay5uYW1lID0gdHJhY2submFtZS5yZXBsYWNlKC9eXFwuYm9uZXNcXFsoW15cXF1dKylcXF0uKHBvc2l0aW9ufHF1YXRlcm5pb258c2NhbGUpJC8sICckMS4kMicpXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjdXJyZW50TWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIodnJtLnNjZW5lKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYm9uZXM6ICcsIGJvbmVzKVxyXG4gICAgICAgICAgICAvLyBjdXJyZW50TWl4ZXIgPSBtaXhlclxyXG4gICAgICAgICAgICBjdXJyZW50QWN0aW9uID0gY3VycmVudE1peGVyLmNsaXBBY3Rpb24oY2xpcClcclxuICAgICAgICAgICAgY29uc29sZS5sb2coY2xpcClcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2Fhc2QgJywgbWl4ZXIpXHJcblxyXG4gICAgICAgICAgICAvLyBjdXJyZW50QWN0aW9uLnJlc2V0KClcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBsZXQgYWN0aW9uID0gbWl4ZXIuY2xpcEFjdGlvbihjbGlwKVxyXG4gICAgICAgICAgICAvLyBhY3Rpb24uc3RvcCgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZXllc0FuaW1hdGlvbiA9ICh2cm0sIGV5ZUFjdGlvbkFuaSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYmxpbmtUcmFjayA9IG5ldyBUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrKFxyXG4gICAgICAgICAgICAgICAgdnJtLmJsZW5kU2hhcGVQcm94eS5nZXRCbGVuZFNoYXBlVHJhY2tOYW1lKCBleWVBY3Rpb25BbmkgKSwgLy8gbmFtZVxyXG4gICAgICAgICAgICAgICAgWyAwLjAsIDAuMywgMC42IF0sIC8vIHRpbWVzXHJcbiAgICAgICAgICAgICAgICBbIDAuMCwgMS4wLCAwLjAgXSAvLyB2YWx1ZXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBleWVDdXJyZW50TWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIoIHZybS5zY2VuZSApXHJcbiAgICAgICAgICAgIGxldCBjbGlwID0gbmV3IFRIUkVFLkFuaW1hdGlvbkNsaXAoICdibGluaycsIDEuMCwgW2JsaW5rVHJhY2tdIClcclxuICAgICAgICAgICAgZXllQWN0aW9uID0gZXllQ3VycmVudE1peGVyLmNsaXBBY3Rpb24oIGNsaXAgKVxyXG4gICAgICAgICAgICAvLyBhY3Rpb24ucGxheSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbGFzdFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpXHJcblxyXG4gICAgICAgIGxldCB1cGRhdGUgPSAodnJtLCBpa0xpc3QsIHBpdm90TGlzdCwgYm9uZXNMaXN0LCBub2Rlc0xpc3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gY2xvY2suZ2V0RGVsdGEoKVxyXG4gICAgICAgICAgICBjb25zdCBIZWFkID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkhlYWQpIC8vIOmgrVxyXG4gICAgICAgICAgICBjb25zdCBKYXcgPSB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuSmF3KSAvLyDpoY5cclxuICAgICAgICAgICAgY29uc3QgTmVjayA9IHZybS5odW1hbm9pZC5nZXRCb25lTm9kZShUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5OZWNrKSAvLyDohJblrZBcclxuICAgICAgICAgICAgY29uc3QgQ2hlc3QgPSB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuQ2hlc3QpIC8vIOiDuOmDqFxyXG4gICAgICAgICAgICBjb25zdCBIaXBzID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkhpcHMpIC8vIOiHgOmDqFxyXG4gICAgICAgICAgICBjb25zdCBMZWZ0RXllID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRFeWUpIC8vIOW3puecvFxyXG4gICAgICAgICAgICBjb25zdCBMZWZ0Rm9vdCA9IHZybS5odW1hbm9pZC5nZXRCb25lTm9kZShUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0Rm9vdCkgLy8g5bem6IWzXHJcbiAgICAgICAgICAgIGNvbnN0IExlZnRIYW5kID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRIYW5kKSAvLyDlt6bmiYtcclxuICAgICAgICAgICAgY29uc3QgTGVmdExvd2VyQXJtID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRMb3dlckFybSkgLy8g5bem5LiL6IeCXHJcbiAgICAgICAgICAgIGNvbnN0IExlZnRMb3dlckxlZyA9IHZybS5odW1hbm9pZC5nZXRCb25lTm9kZShUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0TG93ZXJMZWcpIC8vIOW3puS4i+iFv1xyXG4gICAgICAgICAgICBjb25zdCBMZWZ0VXBwZXJBcm0gPSB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuTGVmdFVwcGVyQXJtKSAvLyDlt6bkuIroh4JcclxuICAgICAgICAgICAgY29uc3QgTGVmdFVwcGVyTGVnID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRVcHBlckxlZykgLy8g5bem5LiK6IW/XHJcbiAgICAgICAgICAgIGNvbnN0IFJpZ2h0RXllID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0RXllKSAvLyDlj7PnnLxcclxuICAgICAgICAgICAgY29uc3QgUmlnaHRGb290ID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0Rm9vdCkgLy8g5Y+z6IWzXHJcbiAgICAgICAgICAgIGNvbnN0IFJpZ2h0SGFuZCA9IHZybS5odW1hbm9pZC5nZXRCb25lTm9kZShUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5SaWdodEhhbmQpIC8vIOWPs+aJi1xyXG4gICAgICAgICAgICBjb25zdCBSaWdodExvd2VyQXJtID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0TG93ZXJBcm0pIC8vIOWPs+S4i+iHglxyXG4gICAgICAgICAgICBjb25zdCBSaWdodExvd2VyTGVnID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0TG93ZXJMZWcpIC8vIOWPs+S4i+iFv1xyXG4gICAgICAgICAgICBjb25zdCBSaWdodFVwcGVyQXJtID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJBcm0pIC8vIOWPs+S4iuiHglxyXG4gICAgICAgICAgICBjb25zdCBSaWdodFVwcGVyTGVnID0gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJMZWcpIC8vIOWPs+S4iuiFv1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyBoZWFkLnJvdGF0aW9uLnggPSBjb250cm9sLnlcclxuICAgICAgICAgICAgLy8gaGVhZC5yb3RhdGlvbi54ID0gY29udHJvbC55ICogMC4wMSAvLyDpoK3lt6blj7Pnp7tcclxuICAgICAgICAgICAgLy8gaGVhZC5yb3RhdGlvbi55ID0gY29udHJvbC54ICogMC4wMSAvLyDpoK3kuIrkuIvnp7tcclxuXHJcbiAgICAgICAgICAgIC8vIEhlYWQucm90YXRpb24ueCA9IG9mZnNldFlcclxuICAgICAgICAgICAgLy8gSGVhZC5yb3RhdGlvbi55ID0gb2Zmc2V0WFxyXG5cclxuICAgICAgICAgICAgTGVmdFVwcGVyQXJtLnJvdGF0aW9uLnggPSBjb250cm9sLmxlZnRVcHBlckFybS54XHJcbiAgICAgICAgICAgIExlZnRVcHBlckFybS5yb3RhdGlvbi55ID0gY29udHJvbC5sZWZ0VXBwZXJBcm0ueVxyXG4gICAgICAgICAgICBMZWZ0VXBwZXJBcm0ucm90YXRpb24ueiA9IGNvbnRyb2wubGVmdFVwcGVyQXJtLnpcclxuXHJcbiAgICAgICAgICAgIExlZnRMb3dlckFybS5yb3RhdGlvbi54ID0gY29udHJvbC5sZWZ0TG93ZXJBcm0ueFxyXG4gICAgICAgICAgICBMZWZ0TG93ZXJBcm0ucm90YXRpb24ueSA9IGNvbnRyb2wubGVmdExvd2VyQXJtLnlcclxuICAgICAgICAgICAgTGVmdExvd2VyQXJtLnJvdGF0aW9uLnogPSBjb250cm9sLmxlZnRMb3dlckFybS56XHJcblxyXG4gICAgICAgICAgICBMZWZ0SGFuZC5yb3RhdGlvbi54ID0gY29udHJvbC5sZWZ0SGFuZC54XHJcbiAgICAgICAgICAgIExlZnRIYW5kLnJvdGF0aW9uLnkgPSBjb250cm9sLmxlZnRIYW5kLnlcclxuICAgICAgICAgICAgTGVmdEhhbmQucm90YXRpb24ueiA9IGNvbnRyb2wubGVmdEhhbmQuelxyXG5cclxuXHJcbiAgICAgICAgICAgIFJpZ2h0VXBwZXJBcm0ucm90YXRpb24ueCA9IGNvbnRyb2wucmlnaHRVcHBlckFybS54XHJcbiAgICAgICAgICAgIFJpZ2h0VXBwZXJBcm0ucm90YXRpb24ueSA9IC1jb250cm9sLnJpZ2h0VXBwZXJBcm0ueVxyXG4gICAgICAgICAgICBSaWdodFVwcGVyQXJtLnJvdGF0aW9uLnogPSAtY29udHJvbC5yaWdodFVwcGVyQXJtLnpcclxuXHJcbiAgICAgICAgICAgIFJpZ2h0TG93ZXJBcm0ucm90YXRpb24ueCA9IGNvbnRyb2wucmlnaHRMb3dlckFybS54XHJcbiAgICAgICAgICAgIFJpZ2h0TG93ZXJBcm0ucm90YXRpb24ueSA9IC1jb250cm9sLnJpZ2h0TG93ZXJBcm0ueVxyXG4gICAgICAgICAgICBSaWdodExvd2VyQXJtLnJvdGF0aW9uLnogPSAtY29udHJvbC5yaWdodExvd2VyQXJtLnpcclxuXHJcbiAgICAgICAgICAgIFJpZ2h0SGFuZC5yb3RhdGlvbi54ID0gY29udHJvbC5yaWdodEhhbmQueFxyXG4gICAgICAgICAgICBSaWdodEhhbmQucm90YXRpb24ueSA9IC1jb250cm9sLnJpZ2h0SGFuZC55XHJcbiAgICAgICAgICAgIFJpZ2h0SGFuZC5yb3RhdGlvbi56ID0gLWNvbnRyb2wucmlnaHRIYW5kLnpcclxuICAgICAgICAgICAgLy8gTGVmdExvd2VyQXJtLnJvdGF0aW9uLnkgPSBNYXRoLlBJICogTWF0aC5zaW4oIGNvbnRyb2wubGVmdExvd2VyQXJtIClcclxuICAgICAgICAgICAgLy8gTGVmdEhhbmQucm90YXRpb24ueiA9IE1hdGguUEkgKiBNYXRoLnNpbiggY29udHJvbC5sZWZ0SGFuZCApXHJcblxyXG4gICAgICAgICAgICAvLyDjgr/jg7zjgrLjg4Pjg4jjga7np7vli5VcclxuICAgICAgICAgICAgLy8gcGl2b3RMaXN0WzBdLnJvdGF0aW9uLnogLT0gMC4wMVxyXG4gICAgICAgICAgICAvLyBwaXZvdExpc3RbMV0ucm90YXRpb24ueiArPSAwLjAxXHJcbiAgICAgICAgICAgIC8vIHBpdm90TGlzdFswXS5yb3RhdGlvbi56ID0gY29udHJvbC5sZWZ0SGFuZCAvIDIgLy8g5bem5omLXHJcbiAgICAgICAgICAgIC8vIHBpdm90TGlzdFsxXS5yb3RhdGlvbi56ID0gY29udHJvbC5yaWdodEhhbmQgLyAyIC8vIOWPs+aJi1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY2xvY2suZWxhcHNlZFRpbWUpXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHMgPSAwLjI1ICogTWF0aC5QSSAqIE1hdGguc2luKCBNYXRoLlBJICogY2xvY2suZWxhcHNlZFRpbWUgKVxyXG4gICAgICAgICAgICAvLyB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLk5lY2sgKS5yb3RhdGlvbi56ID0gcyAqIDAuMDU7XHJcbiAgICAgICAgICAgIC8vIC8vIHZybS5odW1hbm9pZC5nZXRCb25lTm9kZSggVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuVXBwZXJDaGVzdCApLnJvdGF0aW9uLnogPSBzICogMC4wNTtcclxuICAgICAgICAgICAgLy8gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKCBUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0VXBwZXJBcm0gKS5yb3RhdGlvbi55ID0gcztcclxuICAgICAgICAgICAgLy8gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKCBUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5MZWZ0VXBwZXJBcm0gKS5yb3RhdGlvbi56ID0gMS4xXHJcbiAgICAgICAgICAgIC8vIHZybS5odW1hbm9pZC5nZXRCb25lTm9kZSggVEhSRUUuVlJNU2NoZW1hLkh1bWFub2lkQm9uZU5hbWUuUmlnaHRVcHBlckFybSApLnJvdGF0aW9uLnkgPSBzO1xyXG4gICAgICAgICAgICAvLyB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLlJpZ2h0VXBwZXJBcm0gKS5yb3RhdGlvbi56ID0gLTEuMVxyXG4gICAgICAgICAgICAvLyB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLkxlZnRVcHBlckxlZyApLnJvdGF0aW9uLnggPSBzICogMC4yNTtcclxuICAgICAgICAgICAgLy8gdnJtLmh1bWFub2lkLmdldEJvbmVOb2RlKCBUSFJFRS5WUk1TY2hlbWEuSHVtYW5vaWRCb25lTmFtZS5SaWdodFVwcGVyTGVnICkucm90YXRpb24ueCA9IHMgKiAtMC4yNTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhd2VmOiAnLCB2cm0uaHVtYW5vaWQuZ2V0Qm9uZU5vZGUoIFRIUkVFLlZSTVNjaGVtYS5IdW1hbm9pZEJvbmVOYW1lLk5lY2sgKSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIElL44Gu5pu05pawXHJcbiAgICAgICAgICAgIC8vIGlrTGlzdFswXS5zb2x2ZSgpXHJcbiAgICAgICAgICAgIC8vIGlrTGlzdFsxXS5zb2x2ZSgpXHJcblxyXG4gICAgICAgICAgICAvLyDohZXjga7mm7TmlrBcclxuICAgICAgICAgICAgLy8gdXBkYXRlQXJtKGJvbmVzTGlzdFswXSwgbm9kZXNMaXN0WzBdLCBNYXRoLlBJIC8gMilcclxuICAgICAgICAgICAgLy8gdXBkYXRlQXJtKGJvbmVzTGlzdFsxXSwgbm9kZXNMaXN0WzFdLCAtTWF0aC5QSSAvIDIpXHJcbiAgICAgICAgICAgIC8vIHdhbGtBbmkoKVxyXG5cclxuICAgICAgICAgICAgbGV0IHRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgIGxldCBkZWx0YSA9IHRpbWUgLSBsYXN0VGltZVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNaXhlcikge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE1peGVyLnVwZGF0ZShkZWx0YSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV5ZUN1cnJlbnRNaXhlcikge1xyXG4gICAgICAgICAgICAgICAgZXllQ3VycmVudE1peGVyLnVwZGF0ZShkZWx0YVRpbWUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBsYXN0VGltZSA9IHRpbWVcclxuXHJcbiAgICAgICAgICAgIC8vIHZybS5ibGVuZFNoYXBlUHJveHkuc2V0VmFsdWUoYWN0aW9uLCBhbmlTKVxyXG4gICAgICAgICAgICB2cm0uYmxlbmRTaGFwZVByb3h5LnNldFZhbHVlKFRIUkVFLlZSTVNjaGVtYS5CbGVuZFNoYXBlUHJlc2V0TmFtZS5BLCBjb250cm9sLm1vdXRoSW50LzEwKVxyXG4gICAgXHJcbiAgICAgICAgICAgIHZybS51cGRhdGUoZGVsdGFUaW1lKVxyXG5cclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHVwZGF0ZSh2cm0sIGlrTGlzdCwgcGl2b3RMaXN0LCBib25lc0xpc3QsIG5vZGVzTGlzdCkpXHJcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbW91c2UgbGlzdGVuZXJcclxuICAgICAgICBsZXQgb2Zmc2V0WCA9IDBcclxuICAgICAgICBsZXQgb2Zmc2V0WSA9IDBcclxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsICggZXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGxvb2tBdFRhcmdldC5wb3NpdGlvbi54ID0gIDEwLjAgKiAoICggZXZlbnQuY2xpZW50WCAtIDAuNSAqIGNhbnZhcy5vZmZzZXRXaWR0aCApIC8gY2FudmFzLm9mZnNldEhlaWdodCApO1xyXG4gICAgICAgICAgICAvLyBsb29rQXRUYXJnZXQucG9zaXRpb24ueSA9IC0xMC4wICogKCAoIGV2ZW50LmNsaWVudFkgLSAwLjUgKiBjYW52YXMub2Zmc2V0SGVpZ2h0ICkgLyBjYW52YXMub2Zmc2V0SGVpZ2h0ICk7XHJcbiAgICAgICAgICAgIG9mZnNldFggPSAoICggZXZlbnQuY2xpZW50WCAtIDAuNSAqIGNhbnZhcy5vZmZzZXRXaWR0aCApIC8gY2FudmFzLm9mZnNldEhlaWdodCApICogMS4wO1xyXG4gICAgICAgICAgICBvZmZzZXRZID0gKCAoIGV2ZW50LmNsaWVudFkgLSAwLjUgKiBjYW52YXMub2Zmc2V0SGVpZ2h0ICkgLyBjYW52YXMub2Zmc2V0SGVpZ2h0ICkgKiAtMS4wO1xyXG4gICAgICAgICAgICBpZihvZmZzZXRYID49IDAuOCkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCA9IDAuOFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKG9mZnNldFggPD0gLTAuOCkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCA9IC0wLjhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihvZmZzZXRZID49IDAuMTApIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldFkgPSAwLjEwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYob2Zmc2V0WSA8PSAtMC40NSkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WSA9IC0wLjQ1XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeClcclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgKCBldmVudCApID0+IHtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coZXZlbnQuYnV0dG9uKVxyXG4gICAgICAgIC8vIH0pXHJcbiAgICB9XHJcbn0pXHJcbiJdfQ==
