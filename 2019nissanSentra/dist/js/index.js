"use strict";var index_view=new Vue({el:"#app",data:{stepPage:"kv",facebase64:"",faceData:{},faceId:"",faceEye:0,faceLip:0,faceNose:0,faceScore:0,picAgree:!1},methods:{checkUpimg:function(){var r=document.querySelector("input"),s=document.querySelector(".preview");r.addEventListener("change",function(){for(;s.firstChild;)s.removeChild(s.firstChild);var e=r.files;if(0===e.length){var t=document.createElement("p");t.textContent="No files currently selected for upload",s.appendChild(t)}else{var n=document.createElement("ol");s.appendChild(n);for(var a=0;a<e.length;a++){var o=document.createElement("li"),t=document.createElement("p");if(c(e[a])){t.textContent="File name "+e[a].name+", file size "+l(e[a].size)+".";var i=document.createElement("img");i.setAttribute("id","blah"),i.src=window.URL.createObjectURL(e[a]),o.appendChild(i),o.appendChild(t)}else t.textContent="File name "+e[a].name+": Not a valid file type. Update your selection.",o.appendChild(t);n.appendChild(o)}}}),r.style.opacity=0;var n=["image/jpeg","image/pjpeg","image/png"];function c(e){for(var t=0;t<n.length;t++)if(e.type===n[t])return!0;return!1}function l(e){return e<1024?e+"bytes":1024<e&&e<1048576?(e/1024).toFixed(1)+"KB":1048576<e?(e/1048576).toFixed(1)+"MB":void 0}},readURL:function(e){var t=this;if(e.files&&e.files[0]){var n=new FileReader;n.onload=function(e){t.facebase64=e.target.result,$("#blah").attr("src",e.target.result),$(".preview").css("display","block"),$(".garybg").css("display","none"),$(".inputlab").css("opacity","0")},n.readAsDataURL(e.files[0])}},processImage:function(){var t=this;$.ajax({url:"https://eastasia.api.cognitive.microsoft.com/face/v1.0/detect?"+$.param({returnFaceId:"true",returnFaceLandmarks:"true",returnFaceAttributes:"age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise"}),beforeSend:function(e){e.setRequestHeader("Content-Type","application/json"),e.setRequestHeader("Ocp-Apim-Subscription-Key","a33915a3b926473da34474fdca48f3eb")},type:"POST",data:'{"url": "http://data.whicdn.com/images/159997508/large.jpg"}'}).done(function(e){console.log(e),t.faceData=e,$("#responseTextArea").val(JSON.stringify(e,null,2))}).fail(function(e,t,n){var a=""===n?"Error. ":n+" ("+e.status+"): ";a+=""===e.responseText?"":jQuery.parseJSON(e.responseText).message?jQuery.parseJSON(e.responseText).message:jQuery.parseJSON(e.responseText).error.message,alert(a)})},dataURItoBlob:function(e){var t;t=0<=e.split(",")[0].indexOf("base64")?atob(e.split(",")[1]):unescape(e.split(",")[1]);for(var n=e.split(",")[0].split(":")[1].split(";")[0],a=new Uint8Array(t.length),o=0;o<t.length;o++)a[o]=t.charCodeAt(o);return new Blob([a],{type:n})},loadcanvas:function(){var e=this,t=(document.getElementById("loadcanvas").getContext("2d"),new Image,e.faceData.FaceLandmarks),n=(e.faceData.FaceRectangle,[{x:t.EyebrowLeftOuter.X,y:t.EyebrowLeftOuter.Y},{x:t.EyebrowLeftInner.X,y:t.EyebrowLeftInner.Y}]);e.panPoint(n);var a=[{x:t.EyebrowRightOuter.X,y:t.EyebrowRightOuter.Y},{x:t.EyebrowRightInner.X,y:t.EyebrowRightInner.Y}];e.panPoint(a);var o=[{x:t.EyeLeftOuter.X,y:t.EyeLeftOuter.Y},{x:t.PupilLeft.X,y:t.PupilLeft.Y},{x:t.EyeLeftInner.X,y:t.EyeLeftInner.Y}];e.panPoint(o);var i=[{x:t.EyeRightOuter.X,y:t.EyeRightOuter.Y},{x:t.PupilRight.X,y:t.PupilRight.Y},{x:t.EyeRightInner.X,y:t.EyeRightInner.Y}];e.panPoint(i);var r=[{x:t.NoseLeftAlarTop.X,y:t.NoseLeftAlarTop.Y},{x:t.NoseRightAlarTop.X,y:t.NoseRightAlarTop.Y},{x:t.NoseLeftAlarOutTip.X,y:t.NoseLeftAlarOutTip.Y},{x:t.NoseTip.X,y:t.NoseTip.Y},{x:t.NoseRightAlarOutTip.X,y:t.NoseRightAlarOutTip.Y}];e.panPoint(r);var s=[{x:t.MouthLeft.X,y:t.MouthLeft.Y},{x:t.UpperLipTop.X,y:t.UpperLipTop.Y},{x:t.UnderLipBottom.X,y:t.UnderLipBottom.Y},{x:t.MouthRight.X,y:t.MouthRight.Y}];e.panPoint(s)},drawline:function(){var e=this,t=document.getElementById("loadcanvas");if(t.getContext){var n=t.getContext("2d");n.strokeStyle="#ffffff",n.lineWidth=2;var a=e.faceData[0].faceLandmarks;n.beginPath(),n.lineCap="round",n.lineJoin="round",n.save();var o=[{x:a.eyebrowLeftOuter.x,y:a.eyebrowLeftOuter.y},{x:a.eyebrowLeftInner.x,y:a.eyebrowLeftInner.y}];e.panPoint(o);var i=[{x:a.eyebrowRightOuter.x,y:a.eyebrowRightOuter.y},{x:a.eyebrowRightInner.x,y:a.eyebrowRightInner.y}];e.panPoint(i);var r=[{x:a.eyeLeftTop.x,y:a.eyeLeftTop.y},{x:a.eyeLeftOuter.x,y:a.eyeLeftOuter.y},{x:a.eyeLeftBottom.x,y:a.eyeLeftBottom.y},{x:a.eyeLeftInner.x,y:a.eyeLeftInner.y},{x:a.eyeLeftTop.x,y:a.eyeLeftTop.y}];e.panPoint(r);var s=[{x:a.eyeRightTop.x,y:a.eyeRightTop.y},{x:a.eyeRightOuter.x,y:a.eyeRightOuter.y},{x:a.eyeRightBottom.x,y:a.eyeRightBottom.y},{x:a.eyeRightInner.x,y:a.eyeRightInner.y},{x:a.eyeRightTop.x,y:a.eyeRightTop.y}];e.panPoint(s);var c=[{x:a.noseRootLeft.x,y:a.noseRootLeft.y},{x:a.noseLeftAlarTop.x,y:a.noseLeftAlarTop.y},{x:a.noseLeftAlarOutTip.x,y:a.noseLeftAlarOutTip.y},{x:a.noseTip.x,y:a.noseTip.y},{x:a.noseRightAlarOutTip.x,y:a.noseRightAlarOutTip.y},{x:a.noseRightAlarTop.x,y:a.noseRightAlarTop.y},{x:a.noseRootRight.x,y:a.noseRootRight.y}];e.panPoint(c),window.requestAnimationFrame(e.drawline)}},drawRowline:function(e,t,n,a,o){var i=0,r=0,s=document.getElementById("loadcanvas").getContext("2d");var c=setInterval(function(){i<=o&&(i+=o/10,r+=.1,s.moveTo(e,t),s.lineTo(e+(n-e)*r,t+(a-t)*r),s.stroke())},100);setTimeout(function(){clearInterval(c)},2e3)},lineAni:function(t){var n=document.getElementById("loadcanvas").getContext("2d");n.lineCap="round",n.strokeStyle="#ffffff";var a=1,o=[];t.forEach(function(e){o.push(e)}),n.lineWidth=2;t=function(e){for(var t=[],n=1;n<e.length;n++)for(var a=e[n-1],o=e[n],i=o.x-a.x,r=o.y-a.y,s=0;s<100;s++){var c=a.x+i*s/100,l=a.y+r*s/100;t.push({x:c,y:l})}return t}(o);!function e(){a<t.length-1&&requestAnimationFrame(e);n.beginPath();n.moveTo(t[a-1].x,t[a-1].y);n.lineTo(t[a].x,t[a].y);n.stroke();a+=2}()},cutImg:function(){var e=this.faceData.FaceRectangle,t=document.getElementById("showcanvas"),n=t.getContext("2d"),a=document.getElementById("blah");n.drawImage(a,e.Left,e.Top,e.Width+10,e.Height+10,0,0,t.width,t.height)},cutImg2:function(){var e=this.faceData.FaceRectangle,t=document.getElementById("showcanvas2"),n=t.getContext("2d"),a=document.getElementById("loadcanvas");n.drawImage(a,e.Left,e.Top,e.Width+10,e.Height+10,0,0,t.width,t.height)},lineargrad:function(){var n=document.getElementById("anicanvas"),a=n.getContext("2d"),o=0;function i(e){if(o<=n.height){o+=10,window.requestAnimationFrame(i);var t=a.createLinearGradient(n.width,n.height,n.width,o);t.addColorStop(.7,"rgba(255, 255, 255, 0.4)"),a.clearRect(0,0,n.width,n.height),a.fillRect(0,0,n.width,o),a.fillStyle=t}}Date.now(),window.requestAnimationFrame(i)},scanAni:function(t){var n=this,a=new Image,o=document.getElementById("anicanvas"),i=o.getContext("2d"),r=0,s=-540;a.onload=function e(){i.clearRect(0,0,o.width,o.height);i.drawImage(a,r,s);s+=5;s<0&&requestAnimationFrame(e);"2"==t&&-200<s&&$("#showcanvas2").css("opacity","1");"3"==t&&-100<s&&($("#showcanvas3").css("opacity","1"),window.open("result.html?id="+n.faceId+"&type=user","_self"))},a.src="./images/scaneff.png"},panPoint:function(e){var t=document.getElementById("loadcanvas").getContext("2d");e.forEach(function(e){t.fillStyle="#FFFFFF",t.beginPath(),t.arc(e.x,e.y,2,0,2*Math.PI,!0),t.closePath(),t.fill()})},scanstep:function(){var e=this;e.scanAni(),setTimeout(function(){e.scanAni("2"),setTimeout(function(){e.scanAni("3")},3e3)},3e3)}},mounted:function(){var e=this;$("#userpic").change(function(){e.readURL(this)}),e.grecaptcha("index")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
