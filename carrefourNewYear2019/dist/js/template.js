"use strict";function _defineProperty(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}var youTubePlayer;function onYouTubeIframeAPIReady(){var e,o=document.getElementById("YouTube-video-id").value;(youTubePlayer=new YT.Player("YouTube-player",{videoId:o,height:300,width:400,playerVars:(e={autohide:0,cc_load_policy:0,controls:2,disablekb:1,iv_load_policy:3,modestbranding:1,rel:0},_defineProperty(e,"controls",0),_defineProperty(e,"showinfo",0),_defineProperty(e,"start",3),e),events:{onError:function(e){youTubePlayer.personalPlayer.errors.push(e.data)},onReady:function(e){e.target.loadVideoById({suggestedQuality:"tiny",videoId:o}),youTubePlayerDisplayFixedInfos()},onStateChange:function(e){var o=Math.round(e.target.getVolume()),r=document.getElementById("YouTube-player-volume");r&&Math.round(r.value)!=o&&(r.value=o)}}})).personalPlayer={currentTimeSliding:!1,errors:[]}}function youTubePlayerActive(){return youTubePlayer&&youTubePlayer.hasOwnProperty("getPlayerState")}function youTubePlayerChangeVideoId(){var e=document.getElementById("YouTube-video-id").value;youTubePlayer.cueVideoById({suggestedQuality:"tiny",videoId:e}),youTubePlayer.pauseVideo(),youTubePlayerDisplayFixedInfos()}function youTubePlayerCurrentTimeChange(e){youTubePlayer.personalPlayer.currentTimeSliding=!1,youTubePlayerActive()&&youTubePlayer.seekTo(e*youTubePlayer.getDuration()/100,!0)}function youTubePlayerCurrentTimeSlide(){youTubePlayer.personalPlayer.currentTimeSliding=!0}function youTubePlayerDisplayFixedInfos(){youTubePlayerActive()&&(document.getElementById("YouTube-player-fixed-infos").innerHTML="Embed code: <textarea readonly>"+youTubePlayer.getVideoEmbedCode()+"</textarea>")}function youTubePlayerDisplayInfos(){void 0===this.nbCalls||3<=this.nbCalls?this.nbCalls=0:++this.nbCalls;var e='<span id="indicator-display" title="timing of informations refreshing">'+["|","/",String.fromCharCode(8212),"\\"][this.nbCalls]+"</span>";if(youTubePlayerActive()){var o=youTubePlayer.getPlayerState(),r=youTubePlayer.getCurrentTime(),u=youTubePlayer.getDuration(),t=r&&u?100*r/u:0,a=youTubePlayer.hasOwnProperty("getVideoLoadedFraction")?youTubePlayer.getVideoLoadedFraction():0,n=youTubePlayer.getVideoUrl();r||(r=0),u||(u=0);var y=youTubePlayer.getVolume();youTubePlayer.personalPlayer.currentTimeSliding||(document.getElementById("YouTube-player-progress").value=t),document.getElementById("YouTube-player-infos").innerHTML=e+'URL: <a class="url" href="'+n+'">'+n+"</a><br>Quality: <strong>"+youTubePlayer.getPlaybackQuality()+"</strong> &mdash; Available quality: <strong>"+youTubePlayer.getAvailableQualityLevels()+"</strong><br>State <strong>"+o+"</strong>: <strong>"+youTubePlayerStateValueToDescription(o)+"</strong><br>Loaded: <strong>"+(100*a).toFixed(1)+"</strong>%<br>Duration: <strong>"+r.toFixed(2)+"</strong>/<strong>"+u.toFixed(2)+"</strong>s = <strong>"+t.toFixed(2)+"</strong>%<br>Volume: <strong>"+y+"</strong>%",document.getElementById("YouTube-player-errors").innerHTML="<div>Errors: <strong>"+youTubePlayer.personalPlayer.errors+"</strong></div>"}else document.getElementById("YouTube-player-infos").innerHTML=e}function youTubePlayerPause(){youTubePlayerActive()&&youTubePlayer.pauseVideo()}function youTubePlayerPlay(){youTubePlayerActive()&&youTubePlayer.playVideo()}function youTubePlayerStateValueToDescription(e,o){var r={"-1":"unstarted",0:"ended",1:"playing",2:"paused",3:"buffering",5:"video cued"};return e in r?r[e]:o}function youTubePlayerStop(){youTubePlayerActive()&&(youTubePlayer.stopVideo(),youTubePlayer.clearVideo())}function youTubePlayerVolumeChange(e){youTubePlayerActive()&&youTubePlayer.setVolume(e)}!function(){function e(){var e=document.createElement("script");e.src="https://www.youtube.com/iframe_api";var o=document.getElementsByTagName("script")[0];o.parentNode.insertBefore(e,o),setInterval(youTubePlayerDisplayInfos,1e3)}window.addEventListener?window.addEventListener("load",e):window.attachEvent&&window.attachEvent("onload",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
