"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var production=!1===$("#appjs").data("mode"),friendo_url=$("#appjs").data("site"),device=deviceCheck();Vue.config.devtools=!production,Vue.config.debug=!production,Vue.config.silent=production;var md=new MobileDetect(window.navigator.userAgent),tag=document.createElement("script");function findGetParameter(t){var n=null,o=[];return location.search.substr(1).split("&").forEach(function(e){(o=e.split("="))[0]===t&&(n=decodeURIComponent(o[1]))}),n}function checkCookie(t){var n=null,o=[];return document.cookie.split(";").forEach(function(e){" "==e.charAt(0)&&(e=e.substring(1)),(o=e.split("="))[0]===t&&(n=o[1])}),n}function deviceCheck(){var e={},t=new MobileDetect(window.navigator.userAgent);return t.match(/android/i)?(e.os="android",e.version=t.version("android")):t.match(/(iphone|ipad|ipod);?/i)?(e.os="ios",e.version=t.version("iOS")):(e.os="pc",e.version=t.version("Chrome")),e}$(function(){console.log("v1.0"),console.log(device),$(".nav").menu()}),Vue.mixin({data:function(){return{status:"",startDate:"",endDate:"",projectStatus:null,errorMsg:"",envMode:production?"Started":"Testing",loading:!1,mainToken:"",isPc:!1,popup:!1,poPage:""}},computed:{},watch:{errorMsg:function(e){$("body").toggleClass("_freeze")}},methods:{gaEvant:function(e){dataLayer.push({event:e}),console.log("ga:",e)},server_busy:function(){var e=this;e.errorMsg="系統忙碌中，請稍後在試!",e.loading=!1,e.errorCou=6},setCookie:function(e,t,n){var o=new Date;o.setTime(o.getTime()+1e3*n);var i="expires="+o.toUTCString();document.cookie=e+"="+t+";"+i+";"},logger:function(e,t,n){if(production){_LTracker.push({level:["ERROR","DEBUG","WARNING","INFO","ALL"][e],content:JSON.stringify(t),path:window.location.href,tag:n||null,device:device,timestamp:Date.now()})}},checkOnline:function(){navigator.onLine||alert("Internet 連線已斷開，請確認您的網路狀態。")},scrollTo:function(e){$("html,body").animate({scrollTop:$(e).offset().top},500)},getToken:function(){var t=this;return $.ajax({url:"".concat(friendo_url,"auth/login?projectId=66"),headers:{webtoken:"WBqIHc9hTmwyL+g9m0ykfA=="},method:"GET",dataType:"json"}).done(function(e){t.mainToken=e.token,t.startDate=e.startDate,t.endDate=e.endDate,t.projectStatus=e.projectStatus})},grecaptcha:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(n){var o=this;return new Promise(function(t,e){grecaptcha.execute("6LfUo7MUAAAAAJQAML08ruhPeYZvihLYaVvtuYrJ",{action:n}).then(function(e){o.reCaptcha=e,t()},function(){alert("Google驗證失敗，請再次嘗試\n如無法排除此問題，建議重新整理此頁面"),e()})})}),checkBrower:function(e){1e3<window.innerWidth?navigator.userAgent.match("Instagram")||navigator.userAgent.match("FB")?this.isPc=!1:(this.isPc=!0,document.querySelector("body").style="overflow: hidden","index"!==e&&(window.location="index.html")):this.isPc=!1},checkPage:function(e){"ios"===device.os||"android"===device.os?this.isPc=!1:(this.isPc=!0,document.querySelector("body").style="overflow: hidden","index"!==e&&(window.location="index.html"))},popClose:function(){this.popup=!1,this.poPage=""},eventOpen:function(e){this.popup=!0,this.poPage=e}},mounted:function(){}});var slickUse=function(){function n(e,t){_classCallCheck(this,n),this.bd=e,this.Slide=t}return _createClass(n,[{key:"Start",value:function(){$(this.bd).slick({arrows:!1,initialSlide:this.Slide})}},{key:"Next",value:function(){$(this.bd).slick("slickNext")}},{key:"Prev",value:function(){$(this.bd).slick("slickPrev")}},{key:"videoPlay",value:function(){var r;r=Math.floor($(this.bd+" video").length/2),$(this.bd).on("beforeChange",function(e,t,n,o){for(var i=0;i<r;i++)o===i?$("#video"+(i+1)).get(0).play():$("#video"+(i+1)).get(0).pause()})}}]),n}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
