"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var ProjectApi=function(){function n(e,t){_classCallCheck(this,n),this.baseReq,this.info,this.jwt,this.date,this.tokenId=e,this.webtoken=t,this.friendo_url=document.getElementById("appjs").dataset.site,this.init()}return _createClass(n,[{key:"init",value:function(){var t=this;this.baseReq=axios.create({baseURL:this.friendo_url,headers:{"Content-Type":"application/json"},dataType:"json",data:{}}),this.baseReq.interceptors.request.use(function(e){return e.headers.Authorization="Bearer "+t.jwt,e},function(e){return console.error(e),Promise.reject(e)}),this.baseReq.interceptors.response.use(function(e){return e.data},function(e){return console.error("res Error:",e),Promise.reject(e)})}},{key:"token",value:function(){var t=this;return axios.get("".concat(this.friendo_url,"token/").concat(this.tokenId),{headers:{webtoken:this.webtoken},dataType:"json"}).then(function(e){return t.jwt=e.data.token,t.info={startDate:e.data.startDate,endDate:e.data.endDate,status:e.data.projectStatus},t.checkPorject()})}},{key:"get",value:function(e,t){var n=this;return this.token().then(function(){return n.baseReq.get(e,t)})}},{key:"post",value:function(e,t,n){var r=this;return this.token().then(function(){return r.baseReq.post(e,t,n)})}},{key:"checkPorject",value:function(){switch(this.info.status){case 0:case 1:return Promise.reject();case 3:return alert("活動已結束"),Promise.reject();default:return Promise.resolve()}}}]),n}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJQcm9qZWN0QXBpIiwidG9rZW5JZCIsIndlYnRva2VuIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImJhc2VSZXEiLCJpbmZvIiwiand0IiwiZGF0ZSIsImZyaWVuZG9fdXJsIiwiZGF0YXNldCIsInNpdGUiLCJpbml0IiwiYXhpb3MiLCJjcmVhdGUiLCJiYXNlVVJMIiwiQ29udGVudC1UeXBlIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImRhdGEiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIl90aGlzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiUHJvbWlzZSIsInJlc3BvbnNlIiwicmVzIiwiZGF0YVR5cGUiLCJyZWplY3QiLCJfdGhpczIiLCJnZXQiLCJjb25jYXQiLCJzdGFydERhdGUiLCJlbmREYXRlIiwic3RhdHVzIiwicHJvamVjdFN0YXR1cyIsImNoZWNrUG9yamVjdCIsIl90aGlzMyIsInRva2VuIiwidXJsIiwiaGVhZGVyIiwiX3RoaXM0IiwiYWxlcnQiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoidVpBQ01BLFcsV0FDRixTQUFBQSxFQUFZQyxFQUFTQyxHQUFVQyxnQkFBQUMsS0FBQUosR0FDM0JJLEtBQUtDLFFBQ0xELEtBQUtFLEtBQ0xGLEtBQUtHLElBQ0xILEtBQUtJLEtBQ0xKLEtBQUtILFFBQVVBLEVBTmpCRCxLQUFBQSxTQU9rQkUsRUFOcEJFLEtBQUFLLFlBQVlSLFNBQVNDLGVBQVUsU0FBQVEsUUFBQUMsS0FBQVAsS0FBQVEsYyxrQ0FDM0IsV0FBS1AsSUFBQUEsRUFBQUEsS0FDTEQsS0FBQUMsUUFBQVEsTUFBQUMsT0FBQSxDQUNBQyxRQUFBWCxLQUFBSyxZQUNLRCxRQUFMLENBQ0FRLGVBQUEsb0JBRUtQLFNBQUwsT0FDS0csS0FBTCxLQVlBUixLQUFLQyxRQUFRWSxhQUFhQyxRQUFRQyxJQUFJLFNBQUFDLEdBVjFDLE9BV1FBLEVBQUtDLFFBQVFDLGNBQWdCLFVBQVlDLEVBQUtoQixJQVh0RGEsR0FBTyxTQUFBSSxHQUNFbkIsT0FhRG9CLFFBQVFDLE1BQU1GLEdBYmxCRyxRQUFzQmIsT0FBT1UsS0FHckJwQixLQUFBQyxRQUFBWSxhQUFnQlcsU0FBQVQsSUFBQSxTQUFBVSxHQUhLLE9BQUFBLEVBQUFULE1BS3pCVSxTQUFBQSxHQUxKLE9BTVFMLFFBQUVDLE1BQUEsYUFBQUYsR0FOVkcsUUFBQUksT0FBQVAsTyxtQkFZQyxXQUFFLElBQUFRLEVBQUE1QixLQUNDcUIsT0FBT1osTUFBUG9CLElBQU8sR0FBQUMsT0FBUDlCLEtBQUFLLFlBQU8sVUFBQXlCLE9BQVA5QixLQUFBSCxTQUFBLENBQ0FvQixRQUFPTSxDQUxYekIsU0FBQUUsS0FBQUYsVUFTSTRCLFNBQVdWLFNBRVhLLEtBQUFBLFNBQU9JLEdBS1AsT0FKQUcsRUFBT0wsSUFBUUksRUFBQUEsS0FBT1AsTUFKMUJRLEVBQUExQixLQUFBLENBTUg2QixVQUFBTixFQUFBVCxLQUFBZSxVQWFXQyxRQUFVUCxFQUFJVCxLQUFLZ0IsUUFDbkJDLE9BQVNSLEVBQUlULEtBQUtrQixlQVp0Qk4sRUFBQU8sbUIsaUJBRUFsQixTQUFBQSxFQUFBQSxHQUFTLElBQUFtQixFQUFBcEMsS0FDTCxPQUFBQSxLQUFBcUMsUUFBaUJ2QyxLQUFBQSxXQUZvQyxPQUFBc0MsRUFBQW5DLFFBQUE0QixJQUFBUyxFQUFBQyxPLGtCQVF6RCxTQUFBRCxFQUFJdEIsRUFBSnVCLEdBQVksSUFBQUMsRUFBQXhDLEtBQ1IrQixPQUFBQSxLQUFTTSxRQUFNckIsS0FBS2UsV0FDcEJDLE9BQVVQLEVBQUlULFFBQUtnQixLQUZYTSxFQUFBdEIsRUFBQXVCLE8sMEJBTWYsV0FnQkQsT0FBUXZDLEtBQUtFLEtBQUsrQixRQUNkLEtBQUssRUFHTCxLQUFLLEVBakJGLE9BQUFWLFFBQWtCSSxTQUF6QixLQUFBLEVBc0JRLE9BbkJYYyxNQUFBLFNBbUJrQmxCLFFBQVFJLFNBakIzQixRQUF3QixPQUFBSixRQUFBbUIsaUIiLCJmaWxlIjoiYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNsYXNzIFByb2plY3RBcGkge1xyXG4gICAgY29uc3RydWN0b3IodG9rZW5JZCwgd2VidG9rZW4pIHtcclxuICAgICAgICB0aGlzLmJhc2VSZXE7XHJcbiAgICAgICAgdGhpcy5pbmZvO1xyXG4gICAgICAgIHRoaXMuand0O1xyXG4gICAgICAgIHRoaXMuZGF0ZTtcclxuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xyXG4gICAgICAgIHRoaXMud2VidG9rZW4gPSB3ZWJ0b2tlbjtcclxuICAgICAgICB0aGlzLmZyaWVuZG9fdXJsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBqc1wiKS5kYXRhc2V0LnNpdGU7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMuYmFzZVJlcSA9ICBheGlvcy5jcmVhdGUoe1xyXG4gICAgICAgICAgICBiYXNlVVJMOiB0aGlzLmZyaWVuZG9fdXJsLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBkYXRhOiB7fVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmJhc2VSZXEuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBkYXRhLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIHRoaXMuand0XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYmFzZVJlcS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKCByZXMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGE7XHJcbiAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcigncmVzIEVycm9yOicsIGVycilcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICB0b2tlbigpIHtcclxuICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGAke3RoaXMuZnJpZW5kb191cmx9dG9rZW4vJHt0aGlzLnRva2VuSWR9YCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIndlYnRva2VuXCI6IHRoaXMud2VidG9rZW5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuand0ID0gcmVzLmRhdGEudG9rZW5cclxuICAgICAgICAgICAgdGhpcy5pbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlOiByZXMuZGF0YS5zdGFydERhdGUsXHJcbiAgICAgICAgICAgICAgICBlbmREYXRlIDogcmVzLmRhdGEuZW5kRGF0ZSxcclxuICAgICAgICAgICAgICAgIHN0YXR1cyA6IHJlcy5kYXRhLnByb2plY3RTdGF0dXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrUG9yamVjdCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBnZXQodXJsLCBoZWFkZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b2tlbigpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlUmVxLmdldCh1cmwsIGhlYWRlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdCh1cmwsIGRhdGEsIGhlYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VSZXEucG9zdCh1cmwsIGRhdGEsIGhlYWRlcik7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjaGVja1BvcmplY3QoKSB7IFxyXG4gICAgICAgIC8vIFwi5rS75YuV54uA5oWLICA9PiAw77ya5rS75YuV5LiN5a2Y5ZyoIDHvvJrlsJrmnKrplovlp4sgMu+8mumAsuihjOS4rSAz77ya5rS75YuV57WQ5p2fXCJcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuaW5mby5zdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIua0u+WLleW3sue1kOadn1wiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
