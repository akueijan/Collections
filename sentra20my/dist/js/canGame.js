"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),e}var carGame=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10;_classCallCheck(this,t),this.speed=e,this.mainSize={width:window.innerWidth,height:window.innerHeight},this.rot=this.mainSize.height/this.mainSize.width,this.imgs={roadimg:{src:"./images/road.jpg"},userCar:{src:"./images/game_usercar.png"},userCarwan:{src:"./images/game_usercar_wan.png"},targetCar:{src:"./images/game_targetcar.png"},targetCarbrk:{src:"./images/game_targetcar_brk.png"},gameoverCar:{src:"./images/white_brakes_gameover.png"},scoreBg:{src:"./images/game-secondbg.png"},overimg:{src:"./images/gameover_near.jpg"}}}return _createClass(t,[{key:"init",value:function(){var t=this,e=document.querySelector("#canvas");e.width=t.mainSize.width,e.height=t.mainSize.height;var i,a,r,h,n,o,g,d=new Image,c=new Image,s=new Image,w=new Image,l=new Image,m=new Image,f=new Image,u=new Image,p=new Image,v=e.getContext("2d"),b=2,I=150,C=0,y=0,_=0,x=60,O=0,k=0,j=0,P=document.querySelector(".playbtn");t.can1=e,d.src=t.imgs.roadimg.src,c.src=t.imgs.roadimg.src,s.src=t.imgs.userCar.src,w.src=t.imgs.userCarwan.src,l.src=t.imgs.targetCar.src,m.src=t.imgs.targetCarbrk.src,f.src=t.imgs.gameoverCar.src,u.src=t.imgs.scoreBg.src,p.src=t.imgs.overimg.src;var S=new Promise(function(e){d.onload=function(){e()}}),T=new Promise(function(e){c.onload=function(){e()}}),M=new Promise(function(e){s.onload=function(){e()}}),z=new Promise(function(e){w.onload=function(){e()}}),H=new Promise(function(e){l.onload=function(){e()}}),q=new Promise(function(e){m.onload=function(){e()}}),E=new Promise(function(e){f.onload=function(){e()}}),L=new Promise(function(e){u.onload=function(){e()}}),B=new Promise(function(e){p.onload=function(){e()}});function D(){i>e.height&&(i=-(d.height/t.rot-a)),a>e.height&&(a=-(c.height/t.rot-i)),v.clearRect(0,0,e.width,e.height),v.drawImage(d,0,0,d.width,d.height,0,i,e.width,d.height/t.rot),v.drawImage(c,0,0,c.width,c.height,0,a,e.width,c.height/t.rot),v.drawImage(u,0,0,u.width,u.height,e.width-u.width/2-10,20,u.width/2,u.height/2),i+=t.speed,a+=t.speed,70<=x&&(I-=b-.03*x),80<=x&&(I-=b-.02*x),100<=x&&(I-=(b=1)-.01*x),5<=C&&C<21&&(I-=b-.025*x,90<=x&&20<=++O&&(b=Math.random()<.5?-.1:2,O=0)),21<=C&&C<31&&(I-=b-.02*x,85<=x&&(10==++k&&(b=Math.random()<.5?-.1:2),13==k&&(b=Math.random()<.5?-.1:2),15<=k&&(k=0))),31<=C&&(I-=b-.01*x,80<=x&&(10==++j&&(b=Math.random()<.5?-.15:2),12==j&&(b=Math.random()<.5?-.15:2),13<=j&&(j=0))),I-=b-.03*x,(r-=1*Math.random()+1)<=-t.carObj.height&&(r=e.height,h=Math.random()<.5?35:e.width-(t.carObj.width/2+35)),v.drawImage(t.carObj,0,0,t.carObj.width,t.carObj.height,h,r,t.carObj.width/2,t.carObj.height/2),v.fillStyle="#ffffff",v.font="italic 20px Helvetica",v.fillText("km/h",70,50),v.font="italic 30px Helvetica",v.shadowOffsetX=3,v.shadowOffsetY=3,v.shadowColor="rgba(0,0,0,0.3)",v.fillText(y,e.width-58,48),v.fillText(":",e.width-73,46),v.fillText(_,e.width-95,48),v.font="italic 40px Helvetica",v.fillText(Math.floor(x),20,50),v.drawImage(s,0,0,s.width,s.height,e.width/2-s.width/4,e.height-s.height/2-10,s.width/2,s.height/2),b<0?v.drawImage(m,0,0,l.width,l.height,e.width/2-l.width/4,I,l.width/2,l.height/2):v.drawImage(l,0,0,l.width,l.height,e.width/2-l.width/4,I,l.width/2,l.height/2);l.height;e.height-s.height/2-l.height/2+40-30<=I&&v.drawImage(w,0,0,w.width,w.height,e.width/2-w.width/4,e.height-w.height/2-10,w.width/2,w.height/2)}function X(e){e.preventDefault(),this.style.background="url(./images/game_brakes-on.png) center top no-repeat",this.style.backgroundSize="cover",clearInterval(g),o=setInterval(function(){x+=1.5,t.speed+=1.5,50<=t.speed&&(t.speed=50),99<=x&&(x=99)},300)}function Y(e){e.preventDefault(),this.style.background="url(./images/game_brakes-off.png) center top no-repeat",this.style.backgroundSize="cover",clearInterval(o),g=setInterval(function(){x-=2.5,t.speed-=.08*t.speed,t.speed<=15&&(t.speed=15),x<=60&&(x=60)},300)}t.creatCar(),Promise.all([S,T,M,z,H,q,E,L,B]).then(function(){i=-(d.height/t.rot-e.height),v.drawImage(d,0,0,d.width,d.height,0,i,e.width,d.height/t.rot),a=-(c.height/t.rot-i),v.drawImage(c,0,0,c.width,c.height,0,a,e.width,c.height/t.rot),n=e.height-s.height/2-10,v.drawImage(s,0,0,s.width,s.height,e.width/2-s.width/4,n,s.width/2,s.height/2),v.drawImage(l,0,0,l.width,l.height,e.width/2-l.width/4,I,l.width/2,l.height/2),v.drawImage(u,0,0,u.width,u.height,e.width-u.width/2-10,20,u.width/2,u.height/2),v.fillStyle="#ffffff",v.font="italic 20px Helvetica",v.fillText("km/h",70,50),v.font="italic 30px Helvetica",v.shadowOffsetX=3,v.shadowOffsetY=3,v.shadowColor="rgba(0,0,0,0.3)",v.fillText("00",e.width-58,48),v.fillText(":",e.width-73,48),v.fillText("0",e.width-95,48),v.font="italic 40px Helvetica",v.fillText(Math.floor(x),20,50),h=Math.random()<.5?35:e.width-(t.carObj.width/2+35),r=e.height,v.drawImage(t.carObj,0,0,t.carObj.width,t.carObj.height,h,r,t.carObj.width/2,t.carObj.height/2)}),document.querySelector(".startbtn").addEventListener("click",function(){document.querySelector(".decoarr").style="display: none",document.querySelector(".startbtn").style="display: none",index_view.popup=!1,index_view.popPage="",setInterval(D,20),P.addEventListener("touchstart",X),P.addEventListener("touchend",Y),setInterval(function(){C+=1,60<=(y+=1)&&(_+=1,y=0)},1e3)})}},{key:"creatCar",value:function(){var e=this,t=new Image;t.src=e.imgs.targetCar.src,t.onload=function(){e.carObj=t}}}]),t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
